<INVARIANTS>
<!-- =========================================================================== -->
<PPT>
<PPTNAME>../distance_to_user_next(std_msgs/Float64):::ENTER</PPTNAME>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0 != null</INV> <SAMPLES>2052</SAMPLES> <DAIKON>param0 != null</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZero</DAIKONCLASS> <METHOD>/distance_to_user_next(std_msgs/Float64)</METHOD> </INVINFO>
</PPT>
<!-- =========================================================================== -->
<PPT>
<PPTNAME>../distance_to_user_next(std_msgs/Float64):::EXIT</PPTNAME>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.data == orig(param0.data)</INV> <SAMPLES>2052</SAMPLES> <DAIKON>param0.data == orig(param0.data)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/distance_to_user_next(std_msgs/Float64)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return != null</INV> <SAMPLES>2052</SAMPLES> <DAIKON>return != null</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZero</DAIKONCLASS> <METHOD>/distance_to_user_next(std_msgs/Float64)</METHOD> </INVINFO>
</PPT>
<!-- =========================================================================== -->
<PPT>
<PPTNAME>../distance_to_user_until(std_msgs/Float64):::ENTER</PPTNAME>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0 has only one value</INV> <SAMPLES>814</SAMPLES> <DAIKON>param0 has only one value</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.OneOfScalar</DAIKONCLASS> <METHOD>/distance_to_user_until(std_msgs/Float64)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0 != null</INV> <SAMPLES>814</SAMPLES> <DAIKON>param0 != null</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZero</DAIKONCLASS> <METHOD>/distance_to_user_until(std_msgs/Float64)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.data == 1.8512774403</INV> <SAMPLES>814</SAMPLES> <DAIKON>param0.data == 1.8512774403</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.OneOfFloat</DAIKONCLASS> <METHOD>/distance_to_user_until(std_msgs/Float64)</METHOD> </INVINFO>
</PPT>
<!-- =========================================================================== -->
<PPT>
<PPTNAME>../distance_to_user_until(std_msgs/Float64):::EXIT</PPTNAME>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.data == orig(param0.data)</INV> <SAMPLES>814</SAMPLES> <DAIKON>param0.data == orig(param0.data)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/distance_to_user_until(std_msgs/Float64)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.data == 1.8512774403</INV> <SAMPLES>814</SAMPLES> <DAIKON>param0.data == 1.8512774403</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.OneOfFloat</DAIKONCLASS> <METHOD>/distance_to_user_until(std_msgs/Float64)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return != null</INV> <SAMPLES>814</SAMPLES> <DAIKON>return != null</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZero</DAIKONCLASS> <METHOD>/distance_to_user_until(std_msgs/Float64)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.data != return.data</INV> <SAMPLES>814</SAMPLES> <DAIKON>param0.data != return.data</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/distance_to_user_until(std_msgs/Float64)</METHOD> </INVINFO>
</PPT>
<!-- =========================================================================== -->
<PPT>
<PPTNAME>../is_user_watching_drone_next(std_msgs/Bool):::ENTER</PPTNAME>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0 != null</INV> <SAMPLES>2048</SAMPLES> <DAIKON>param0 != null</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZero</DAIKONCLASS> <METHOD>/is_user_watching_drone_next(std_msgs/Bool)</METHOD> </INVINFO>
</PPT>
<!-- =========================================================================== -->
<PPT>
<PPTNAME>../is_user_watching_drone_next(std_msgs/Bool):::EXIT</PPTNAME>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.data == orig(param0.data)</INV> <SAMPLES>2048</SAMPLES> <DAIKON>param0.data == orig(param0.data)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.IntEqual</DAIKONCLASS> <METHOD>/is_user_watching_drone_next(std_msgs/Bool)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return != null</INV> <SAMPLES>2048</SAMPLES> <DAIKON>return != null</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZero</DAIKONCLASS> <METHOD>/is_user_watching_drone_next(std_msgs/Bool)</METHOD> </INVINFO>
</PPT>
<!-- =========================================================================== -->
<PPT>
<PPTNAME>../is_user_watching_drone_until(std_msgs/Bool):::ENTER</PPTNAME>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0 != null</INV> <SAMPLES>25</SAMPLES> <DAIKON>param0 != null</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZero</DAIKONCLASS> <METHOD>/is_user_watching_drone_until(std_msgs/Bool)</METHOD> </INVINFO>
</PPT>
<!-- =========================================================================== -->
<PPT>
<PPTNAME>../is_user_watching_drone_until(std_msgs/Bool):::EXIT</PPTNAME>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.data == orig(param0.data)</INV> <SAMPLES>25</SAMPLES> <DAIKON>param0.data == orig(param0.data)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.IntEqual</DAIKONCLASS> <METHOD>/is_user_watching_drone_until(std_msgs/Bool)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return != null</INV> <SAMPLES>25</SAMPLES> <DAIKON>return != null</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZero</DAIKONCLASS> <METHOD>/is_user_watching_drone_until(std_msgs/Bool)</METHOD> </INVINFO>
</PPT>
<!-- =========================================================================== -->
<PPT>
<PPTNAME>../state_next(std_msgs/String):::ENTER</PPTNAME>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0 != null</INV> <SAMPLES>2215</SAMPLES> <DAIKON>param0 != null</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZero</DAIKONCLASS> <METHOD>/state_next(std_msgs/String)</METHOD> </INVINFO>
</PPT>
<!-- =========================================================================== -->
<PPT>
<PPTNAME>../state_next(std_msgs/String):::EXIT</PPTNAME>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.data == orig(param0.data)</INV> <SAMPLES>2215</SAMPLES> <DAIKON>param0.data == orig(param0.data)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoString.StringEqual</DAIKONCLASS> <METHOD>/state_next(std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return != null</INV> <SAMPLES>2215</SAMPLES> <DAIKON>return != null</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZero</DAIKONCLASS> <METHOD>/state_next(std_msgs/String)</METHOD> </INVINFO>
</PPT>
<!-- =========================================================================== -->
<PPT>
<PPTNAME>../state_until(std_msgs/String):::ENTER</PPTNAME>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0 != null</INV> <SAMPLES>292</SAMPLES> <DAIKON>param0 != null</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZero</DAIKONCLASS> <METHOD>/state_until(std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.data one of { &quot;GO TO GOAL&quot;, &quot;GOAL REACHED&quot; }</INV> <SAMPLES>292</SAMPLES> <DAIKON>param0.data one of { &quot;GO TO GOAL&quot;, &quot;GOAL REACHED&quot; }</DAIKON> <DAIKONCLASS>class daikon.inv.unary.string.OneOfString</DAIKONCLASS> <METHOD>/state_until(std_msgs/String)</METHOD> </INVINFO>
</PPT>
<!-- =========================================================================== -->
<PPT>
<PPTNAME>../state_until(std_msgs/String):::EXIT</PPTNAME>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.data == orig(param0.data)</INV> <SAMPLES>292</SAMPLES> <DAIKON>param0.data == orig(param0.data)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoString.StringEqual</DAIKONCLASS> <METHOD>/state_until(std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.data one of { &quot;GO TO GOAL&quot;, &quot;GOAL REACHED&quot; }</INV> <SAMPLES>292</SAMPLES> <DAIKON>param0.data one of { &quot;GO TO GOAL&quot;, &quot;GOAL REACHED&quot; }</DAIKON> <DAIKONCLASS>class daikon.inv.unary.string.OneOfString</DAIKONCLASS> <METHOD>/state_until(std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return != null</INV> <SAMPLES>292</SAMPLES> <DAIKON>return != null</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZero</DAIKONCLASS> <METHOD>/state_until(std_msgs/String)</METHOD> </INVINFO>
</PPT>
<!-- =========================================================================== -->
<PPT>
<PPTNAME>../velocity_next(geometry_msgs/Twist):::ENTER</PPTNAME>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.angular.y == param0.angular.x</INV> <SAMPLES>2417</SAMPLES> <DAIKON>param0.angular.y == param0.angular.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/velocity_next(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.angular.y == param0.angular.z</INV> <SAMPLES>2417</SAMPLES> <DAIKON>param0.angular.y == param0.angular.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/velocity_next(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0 != null</INV> <SAMPLES>2417</SAMPLES> <DAIKON>param0 != null</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZero</DAIKONCLASS> <METHOD>/velocity_next(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.linear.z one of { -200.0, 0.0 }</INV> <SAMPLES>2417</SAMPLES> <DAIKON>param0.linear.z one of { -200.0, 0.0 }</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.OneOfFloat</DAIKONCLASS> <METHOD>/velocity_next(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.angular.y == 0.0</INV> <SAMPLES>2417</SAMPLES> <DAIKON>param0.angular.y == 0.0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.OneOfFloat</DAIKONCLASS> <METHOD>/velocity_next(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.linear.z &lt;= param0.angular.y</INV> <SAMPLES>2417</SAMPLES> <DAIKON>param0.linear.z &lt;= param0.angular.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessEqual</DAIKONCLASS> <METHOD>/velocity_next(geometry_msgs/Twist)</METHOD> </INVINFO>
</PPT>
<!-- =========================================================================== -->
<PPT>
<PPTNAME>../velocity_next(geometry_msgs/Twist):::EXIT</PPTNAME>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.linear.y == orig(param0.linear.y)</INV> <SAMPLES>2417</SAMPLES> <DAIKON>param0.linear.y == orig(param0.linear.y)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/velocity_next(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.linear.x == orig(param0.linear.x)</INV> <SAMPLES>2417</SAMPLES> <DAIKON>param0.linear.x == orig(param0.linear.x)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/velocity_next(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.linear.z == orig(param0.linear.z)</INV> <SAMPLES>2417</SAMPLES> <DAIKON>param0.linear.z == orig(param0.linear.z)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/velocity_next(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.angular.y == param0.angular.x</INV> <SAMPLES>2417</SAMPLES> <DAIKON>param0.angular.y == param0.angular.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/velocity_next(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.angular.y == param0.angular.z</INV> <SAMPLES>2417</SAMPLES> <DAIKON>param0.angular.y == param0.angular.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/velocity_next(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.angular.y == return.angular.y</INV> <SAMPLES>2417</SAMPLES> <DAIKON>param0.angular.y == return.angular.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/velocity_next(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.angular.y == return.angular.x</INV> <SAMPLES>2417</SAMPLES> <DAIKON>param0.angular.y == return.angular.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/velocity_next(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.angular.y == return.angular.z</INV> <SAMPLES>2417</SAMPLES> <DAIKON>param0.angular.y == return.angular.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/velocity_next(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.angular.y == orig(param0.angular.y)</INV> <SAMPLES>2417</SAMPLES> <DAIKON>param0.angular.y == orig(param0.angular.y)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/velocity_next(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.angular.y == orig(param0.angular.x)</INV> <SAMPLES>2417</SAMPLES> <DAIKON>param0.angular.y == orig(param0.angular.x)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/velocity_next(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.angular.y == orig(param0.angular.z)</INV> <SAMPLES>2417</SAMPLES> <DAIKON>param0.angular.y == orig(param0.angular.z)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/velocity_next(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.linear.z one of { -200.0, 0.0 }</INV> <SAMPLES>2417</SAMPLES> <DAIKON>param0.linear.z one of { -200.0, 0.0 }</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.OneOfFloat</DAIKONCLASS> <METHOD>/velocity_next(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.angular.y == 0.0</INV> <SAMPLES>2417</SAMPLES> <DAIKON>param0.angular.y == 0.0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.OneOfFloat</DAIKONCLASS> <METHOD>/velocity_next(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return != null</INV> <SAMPLES>2417</SAMPLES> <DAIKON>return != null</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZero</DAIKONCLASS> <METHOD>/velocity_next(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.linear.z one of { -200.0, 0.0 }</INV> <SAMPLES>2417</SAMPLES> <DAIKON>return.linear.z one of { -200.0, 0.0 }</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.OneOfFloat</DAIKONCLASS> <METHOD>/velocity_next(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.linear.z &lt;= param0.angular.y</INV> <SAMPLES>2417</SAMPLES> <DAIKON>param0.linear.z &lt;= param0.angular.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessEqual</DAIKONCLASS> <METHOD>/velocity_next(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.linear.z &gt;= return.linear.z</INV> <SAMPLES>2417</SAMPLES> <DAIKON>param0.linear.z &gt;= return.linear.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterEqual</DAIKONCLASS> <METHOD>/velocity_next(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.angular.y &gt;= return.linear.z</INV> <SAMPLES>2417</SAMPLES> <DAIKON>param0.angular.y &gt;= return.linear.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterEqual</DAIKONCLASS> <METHOD>/velocity_next(geometry_msgs/Twist)</METHOD> </INVINFO>
</PPT>
<!-- =========================================================================== -->
<PPT>
<PPTNAME>../velocity_until(geometry_msgs/Twist):::ENTER</PPTNAME>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.linear.y == param0.linear.x</INV> <SAMPLES>1419</SAMPLES> <DAIKON>param0.linear.y == param0.linear.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/velocity_until(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.linear.y == param0.angular.y</INV> <SAMPLES>1419</SAMPLES> <DAIKON>param0.linear.y == param0.angular.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/velocity_until(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.linear.y == param0.angular.x</INV> <SAMPLES>1419</SAMPLES> <DAIKON>param0.linear.y == param0.angular.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/velocity_until(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.linear.y == param0.angular.z</INV> <SAMPLES>1419</SAMPLES> <DAIKON>param0.linear.y == param0.angular.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/velocity_until(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0 != null</INV> <SAMPLES>1419</SAMPLES> <DAIKON>param0 != null</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZero</DAIKONCLASS> <METHOD>/velocity_until(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.linear.y == 0.0</INV> <SAMPLES>1419</SAMPLES> <DAIKON>param0.linear.y == 0.0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.OneOfFloat</DAIKONCLASS> <METHOD>/velocity_until(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.linear.z one of { -200.0, 0.0 }</INV> <SAMPLES>1419</SAMPLES> <DAIKON>param0.linear.z one of { -200.0, 0.0 }</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.OneOfFloat</DAIKONCLASS> <METHOD>/velocity_until(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.linear.y &gt;= param0.linear.z</INV> <SAMPLES>1419</SAMPLES> <DAIKON>param0.linear.y &gt;= param0.linear.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterEqual</DAIKONCLASS> <METHOD>/velocity_until(geometry_msgs/Twist)</METHOD> </INVINFO>
</PPT>
<!-- =========================================================================== -->
<PPT>
<PPTNAME>../velocity_until(geometry_msgs/Twist):::EXIT</PPTNAME>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.linear.y == param0.linear.x</INV> <SAMPLES>1419</SAMPLES> <DAIKON>param0.linear.y == param0.linear.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/velocity_until(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.linear.y == param0.angular.y</INV> <SAMPLES>1419</SAMPLES> <DAIKON>param0.linear.y == param0.angular.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/velocity_until(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.linear.y == param0.angular.x</INV> <SAMPLES>1419</SAMPLES> <DAIKON>param0.linear.y == param0.angular.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/velocity_until(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.linear.y == param0.angular.z</INV> <SAMPLES>1419</SAMPLES> <DAIKON>param0.linear.y == param0.angular.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/velocity_until(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.linear.y == return.angular.y</INV> <SAMPLES>1419</SAMPLES> <DAIKON>param0.linear.y == return.angular.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/velocity_until(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.linear.y == return.angular.x</INV> <SAMPLES>1419</SAMPLES> <DAIKON>param0.linear.y == return.angular.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/velocity_until(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.linear.y == return.angular.z</INV> <SAMPLES>1419</SAMPLES> <DAIKON>param0.linear.y == return.angular.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/velocity_until(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.linear.y == orig(param0.linear.y)</INV> <SAMPLES>1419</SAMPLES> <DAIKON>param0.linear.y == orig(param0.linear.y)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/velocity_until(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.linear.y == orig(param0.linear.x)</INV> <SAMPLES>1419</SAMPLES> <DAIKON>param0.linear.y == orig(param0.linear.x)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/velocity_until(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.linear.y == orig(param0.angular.y)</INV> <SAMPLES>1419</SAMPLES> <DAIKON>param0.linear.y == orig(param0.angular.y)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/velocity_until(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.linear.y == orig(param0.angular.x)</INV> <SAMPLES>1419</SAMPLES> <DAIKON>param0.linear.y == orig(param0.angular.x)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/velocity_until(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.linear.y == orig(param0.angular.z)</INV> <SAMPLES>1419</SAMPLES> <DAIKON>param0.linear.y == orig(param0.angular.z)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/velocity_until(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.linear.z == orig(param0.linear.z)</INV> <SAMPLES>1419</SAMPLES> <DAIKON>param0.linear.z == orig(param0.linear.z)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/velocity_until(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.linear.y == 0.0</INV> <SAMPLES>1419</SAMPLES> <DAIKON>param0.linear.y == 0.0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.OneOfFloat</DAIKONCLASS> <METHOD>/velocity_until(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.linear.z one of { -200.0, 0.0 }</INV> <SAMPLES>1419</SAMPLES> <DAIKON>param0.linear.z one of { -200.0, 0.0 }</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.OneOfFloat</DAIKONCLASS> <METHOD>/velocity_until(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return != null</INV> <SAMPLES>1419</SAMPLES> <DAIKON>return != null</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZero</DAIKONCLASS> <METHOD>/velocity_until(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.linear.z one of { -200.0, 0.0 }</INV> <SAMPLES>1419</SAMPLES> <DAIKON>return.linear.z one of { -200.0, 0.0 }</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.OneOfFloat</DAIKONCLASS> <METHOD>/velocity_until(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.linear.y &gt;= param0.linear.z</INV> <SAMPLES>1419</SAMPLES> <DAIKON>param0.linear.y &gt;= param0.linear.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterEqual</DAIKONCLASS> <METHOD>/velocity_until(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.linear.y &gt;= return.linear.z</INV> <SAMPLES>1419</SAMPLES> <DAIKON>param0.linear.y &gt;= return.linear.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterEqual</DAIKONCLASS> <METHOD>/velocity_until(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.linear.z &gt;= return.linear.z</INV> <SAMPLES>1419</SAMPLES> <DAIKON>param0.linear.z &gt;= return.linear.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterEqual</DAIKONCLASS> <METHOD>/velocity_until(geometry_msgs/Twist)</METHOD> </INVINFO>
</PPT>
<!-- =========================================================================== -->
<PPT>
<PPTNAME>../vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped):::ENTER</PPTNAME>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0 != null</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0 != null</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZero</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.y != 0</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.y != 0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZeroFloat</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.child_frame_id == &quot;vicon/TELLO/TELLO&quot;</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.child_frame_id == &quot;vicon/TELLO/TELLO&quot;</DAIKON> <DAIKONCLASS>class daikon.inv.unary.string.OneOfString</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.header.frame_id == &quot;/world&quot;</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.header.frame_id == &quot;/world&quot;</DAIKON> <DAIKONCLASS>class daikon.inv.unary.string.OneOfString</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.x != 0</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.translation.x != 0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZeroFloat</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.y != 0</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.translation.y != 0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZeroFloat</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.x != 0</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.x != 0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZeroFloat</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.header.seq &lt; param0.header.stamp.secs</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.header.seq &lt; param0.header.stamp.secs</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.IntLessThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.header.seq &lt; param0.header.stamp.nsecs</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.header.seq &lt; param0.header.stamp.nsecs</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.IntLessThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.y &lt; param0.transform.rotation.z</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.y &lt; param0.transform.rotation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.y != param0.transform.translation.z</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.y != param0.transform.translation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.y != param0.transform.translation.x</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.y != param0.transform.translation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.y != param0.transform.translation.y</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.y != param0.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.y != param0.transform.rotation.x</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.y != param0.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.y &gt; param0.transform.rotation.w</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.y &gt; param0.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.child_frame_id &gt; param0.header.frame_id</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.child_frame_id &gt; param0.header.frame_id</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoString.StringGreaterThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.z != param0.transform.translation.z</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.z != param0.transform.translation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.z != param0.transform.translation.x</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.z != param0.transform.translation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.z != param0.transform.translation.y</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.z != param0.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.z &gt; param0.transform.rotation.x</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.z &gt; param0.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.z &gt; param0.transform.rotation.w</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.z &gt; param0.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.header.stamp.secs &gt; param0.header.stamp.nsecs</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.header.stamp.secs &gt; param0.header.stamp.nsecs</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.IntGreaterThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.z != param0.transform.translation.x</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.translation.z != param0.transform.translation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.z != param0.transform.translation.y</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.translation.z != param0.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.z &gt; param0.transform.rotation.x</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.translation.z &gt; param0.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.z &gt; param0.transform.rotation.w</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.translation.z &gt; param0.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.x != param0.transform.translation.y</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.translation.x != param0.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.x != param0.transform.rotation.w</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.translation.x != param0.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.y != param0.transform.rotation.x</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.translation.y != param0.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.y != param0.transform.rotation.w</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.translation.y != param0.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.x &gt; param0.transform.rotation.w</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.x &gt; param0.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
</PPT>
<!-- =========================================================================== -->
<PPT>
<PPTNAME>../vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped):::EXIT</PPTNAME>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.header.seq == orig(param0.header.seq)</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.header.seq == orig(param0.header.seq)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.IntEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.y == orig(param0.transform.rotation.y)</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.y == orig(param0.transform.rotation.y)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.child_frame_id == return.child_frame_id</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.child_frame_id == return.child_frame_id</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoString.StringEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.child_frame_id == orig(param0.child_frame_id)</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.child_frame_id == orig(param0.child_frame_id)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoString.StringEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.header.frame_id == return.header.frame_id</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.header.frame_id == return.header.frame_id</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoString.StringEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.header.frame_id == orig(param0.header.frame_id)</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.header.frame_id == orig(param0.header.frame_id)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoString.StringEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.z == orig(param0.transform.rotation.z)</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.z == orig(param0.transform.rotation.z)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.header.stamp.secs == orig(param0.header.stamp.secs)</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.header.stamp.secs == orig(param0.header.stamp.secs)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.IntEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.translation.z == orig(param0.transform.translation.z)</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.translation.z == orig(param0.transform.translation.z)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.header.stamp.nsecs == orig(param0.header.stamp.nsecs)</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.header.stamp.nsecs == orig(param0.header.stamp.nsecs)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.IntEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.translation.x == orig(param0.transform.translation.x)</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.translation.x == orig(param0.transform.translation.x)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.translation.y == orig(param0.transform.translation.y)</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.translation.y == orig(param0.transform.translation.y)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.x == orig(param0.transform.rotation.x)</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.x == orig(param0.transform.rotation.x)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.w == orig(param0.transform.rotation.w)</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.w == orig(param0.transform.rotation.w)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.y != 0</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.y != 0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZeroFloat</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.child_frame_id == &quot;vicon/TELLO/TELLO&quot;</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.child_frame_id == &quot;vicon/TELLO/TELLO&quot;</DAIKON> <DAIKONCLASS>class daikon.inv.unary.string.OneOfString</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.header.frame_id == &quot;/world&quot;</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.header.frame_id == &quot;/world&quot;</DAIKON> <DAIKONCLASS>class daikon.inv.unary.string.OneOfString</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.translation.x != 0</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.translation.x != 0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZeroFloat</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.translation.y != 0</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.translation.y != 0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZeroFloat</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.x != 0</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.x != 0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZeroFloat</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return != null</INV> <SAMPLES>9997</SAMPLES> <DAIKON>return != null</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZero</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.y != 0</INV> <SAMPLES>9997</SAMPLES> <DAIKON>return.transform.rotation.y != 0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZeroFloat</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.translation.x != 0</INV> <SAMPLES>9997</SAMPLES> <DAIKON>return.transform.translation.x != 0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZeroFloat</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.translation.y != 0</INV> <SAMPLES>9997</SAMPLES> <DAIKON>return.transform.translation.y != 0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZeroFloat</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.x != 0</INV> <SAMPLES>9997</SAMPLES> <DAIKON>return.transform.rotation.x != 0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZeroFloat</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.header.seq &lt; param0.header.stamp.secs</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.header.seq &lt; param0.header.stamp.secs</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.IntLessThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.header.seq &lt; param0.header.stamp.nsecs</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.header.seq &lt; param0.header.stamp.nsecs</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.IntLessThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.header.seq - return.header.seq + 1 == 0</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.header.seq - return.header.seq + 1 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.LinearBinary</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.header.seq &lt; return.header.stamp.secs</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.header.seq &lt; return.header.stamp.secs</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.IntLessThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.header.seq &lt; return.header.stamp.nsecs</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.header.seq &lt; return.header.stamp.nsecs</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.IntLessThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.y &lt; param0.transform.rotation.z</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.y &lt; param0.transform.rotation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.y != param0.transform.translation.z</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.y != param0.transform.translation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.y != param0.transform.translation.x</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.y != param0.transform.translation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.y != param0.transform.translation.y</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.y != param0.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.y != param0.transform.rotation.x</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.y != param0.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.y &gt; param0.transform.rotation.w</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.y &gt; param0.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.y &lt; return.transform.rotation.z</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.y &lt; return.transform.rotation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.y != return.transform.translation.z</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.y != return.transform.translation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.y != return.transform.translation.x</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.y != return.transform.translation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.y != return.transform.translation.y</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.y != return.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.y != return.transform.rotation.x</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.y != return.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.y &gt; return.transform.rotation.w</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.y &gt; return.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.child_frame_id &gt; param0.header.frame_id</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.child_frame_id &gt; param0.header.frame_id</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoString.StringGreaterThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.z != param0.transform.translation.z</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.z != param0.transform.translation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.z != param0.transform.translation.x</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.z != param0.transform.translation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.z != param0.transform.translation.y</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.z != param0.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.z &gt; param0.transform.rotation.x</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.z &gt; param0.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.z &gt; param0.transform.rotation.w</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.z &gt; param0.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.z &gt; return.transform.rotation.y</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.z &gt; return.transform.rotation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.z != return.transform.translation.z</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.z != return.transform.translation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.z != return.transform.translation.x</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.z != return.transform.translation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.z != return.transform.translation.y</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.z != return.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.z &gt; return.transform.rotation.x</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.z &gt; return.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.z &gt; return.transform.rotation.w</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.z &gt; return.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.header.stamp.secs &gt; param0.header.stamp.nsecs</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.header.stamp.secs &gt; param0.header.stamp.nsecs</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.IntGreaterThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.header.stamp.secs &gt; return.header.seq</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.header.stamp.secs &gt; return.header.seq</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.IntGreaterThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.header.stamp.secs &lt;= return.header.stamp.secs</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.header.stamp.secs &lt;= return.header.stamp.secs</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.IntLessEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.header.stamp.secs &gt; return.header.stamp.nsecs</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.header.stamp.secs &gt; return.header.stamp.nsecs</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.IntGreaterThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.translation.z != param0.transform.translation.x</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.translation.z != param0.transform.translation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.translation.z != param0.transform.translation.y</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.translation.z != param0.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.translation.z &gt; param0.transform.rotation.x</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.translation.z &gt; param0.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.translation.z &gt; param0.transform.rotation.w</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.translation.z &gt; param0.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.translation.z != return.transform.rotation.y</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.translation.z != return.transform.rotation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.translation.z != return.transform.rotation.z</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.translation.z != return.transform.rotation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.translation.z != return.transform.translation.x</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.translation.z != return.transform.translation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.translation.z != return.transform.translation.y</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.translation.z != return.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.translation.z &gt; return.transform.rotation.x</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.translation.z &gt; return.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.translation.z &gt; return.transform.rotation.w</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.translation.z &gt; return.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.header.stamp.nsecs &gt; return.header.seq</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.header.stamp.nsecs &gt; return.header.seq</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.IntGreaterThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.header.stamp.nsecs &lt; return.header.stamp.secs</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.header.stamp.nsecs &lt; return.header.stamp.secs</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.IntLessThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.header.stamp.nsecs != return.header.stamp.nsecs</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.header.stamp.nsecs != return.header.stamp.nsecs</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.IntNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.translation.x != param0.transform.translation.y</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.translation.x != param0.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.translation.x != param0.transform.rotation.w</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.translation.x != param0.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.translation.x != return.transform.rotation.y</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.translation.x != return.transform.rotation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.translation.x != return.transform.rotation.z</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.translation.x != return.transform.rotation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.translation.x != return.transform.translation.y</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.translation.x != return.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.translation.x != return.transform.rotation.w</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.translation.x != return.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.translation.y != param0.transform.rotation.x</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.translation.y != param0.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.translation.y != param0.transform.rotation.w</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.translation.y != param0.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.translation.y != return.transform.rotation.y</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.translation.y != return.transform.rotation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.translation.y != return.transform.rotation.z</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.translation.y != return.transform.rotation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.translation.y != return.transform.translation.z</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.translation.y != return.transform.translation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.translation.y != return.transform.translation.x</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.translation.y != return.transform.translation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.translation.y != return.transform.rotation.x</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.translation.y != return.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.translation.y != return.transform.rotation.w</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.translation.y != return.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.x &gt; param0.transform.rotation.w</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.x &gt; param0.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.x != return.transform.rotation.y</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.x != return.transform.rotation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.x &lt; return.transform.rotation.z</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.x &lt; return.transform.rotation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.x &lt; return.transform.translation.z</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.x &lt; return.transform.translation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.x != return.transform.translation.y</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.x != return.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.x &gt; return.transform.rotation.w</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.x &gt; return.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.w &lt; return.transform.rotation.y</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.w &lt; return.transform.rotation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.w &lt; return.transform.rotation.z</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.w &lt; return.transform.rotation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.w &lt; return.transform.translation.z</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.w &lt; return.transform.translation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.w != return.transform.translation.y</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.w != return.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.w &lt; return.transform.rotation.x</INV> <SAMPLES>9997</SAMPLES> <DAIKON>param0.transform.rotation.w &lt; return.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.header.seq &lt; return.header.stamp.secs</INV> <SAMPLES>9997</SAMPLES> <DAIKON>return.header.seq &lt; return.header.stamp.secs</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.IntLessThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.header.seq &lt; return.header.stamp.nsecs</INV> <SAMPLES>9997</SAMPLES> <DAIKON>return.header.seq &lt; return.header.stamp.nsecs</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.IntLessThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.y &lt; return.transform.rotation.z</INV> <SAMPLES>9997</SAMPLES> <DAIKON>return.transform.rotation.y &lt; return.transform.rotation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.y != return.transform.translation.z</INV> <SAMPLES>9997</SAMPLES> <DAIKON>return.transform.rotation.y != return.transform.translation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.y != return.transform.translation.x</INV> <SAMPLES>9997</SAMPLES> <DAIKON>return.transform.rotation.y != return.transform.translation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.y != return.transform.translation.y</INV> <SAMPLES>9997</SAMPLES> <DAIKON>return.transform.rotation.y != return.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.y != return.transform.rotation.x</INV> <SAMPLES>9997</SAMPLES> <DAIKON>return.transform.rotation.y != return.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.y &gt; return.transform.rotation.w</INV> <SAMPLES>9997</SAMPLES> <DAIKON>return.transform.rotation.y &gt; return.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.z != return.transform.translation.z</INV> <SAMPLES>9997</SAMPLES> <DAIKON>return.transform.rotation.z != return.transform.translation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.z != return.transform.translation.x</INV> <SAMPLES>9997</SAMPLES> <DAIKON>return.transform.rotation.z != return.transform.translation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.z != return.transform.translation.y</INV> <SAMPLES>9997</SAMPLES> <DAIKON>return.transform.rotation.z != return.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.z &gt; return.transform.rotation.x</INV> <SAMPLES>9997</SAMPLES> <DAIKON>return.transform.rotation.z &gt; return.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.z &gt; return.transform.rotation.w</INV> <SAMPLES>9997</SAMPLES> <DAIKON>return.transform.rotation.z &gt; return.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.header.stamp.secs &gt; return.header.stamp.nsecs</INV> <SAMPLES>9997</SAMPLES> <DAIKON>return.header.stamp.secs &gt; return.header.stamp.nsecs</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.IntGreaterThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.translation.z != return.transform.translation.x</INV> <SAMPLES>9997</SAMPLES> <DAIKON>return.transform.translation.z != return.transform.translation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.translation.z != return.transform.translation.y</INV> <SAMPLES>9997</SAMPLES> <DAIKON>return.transform.translation.z != return.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.translation.z &gt; return.transform.rotation.x</INV> <SAMPLES>9997</SAMPLES> <DAIKON>return.transform.translation.z &gt; return.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.translation.z &gt; return.transform.rotation.w</INV> <SAMPLES>9997</SAMPLES> <DAIKON>return.transform.translation.z &gt; return.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.translation.x != return.transform.translation.y</INV> <SAMPLES>9997</SAMPLES> <DAIKON>return.transform.translation.x != return.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.translation.x != return.transform.rotation.w</INV> <SAMPLES>9997</SAMPLES> <DAIKON>return.transform.translation.x != return.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.translation.y != return.transform.rotation.x</INV> <SAMPLES>9997</SAMPLES> <DAIKON>return.transform.translation.y != return.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.translation.y != return.transform.rotation.w</INV> <SAMPLES>9997</SAMPLES> <DAIKON>return.transform.translation.y != return.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.x &gt; return.transform.rotation.w</INV> <SAMPLES>9997</SAMPLES> <DAIKON>return.transform.rotation.x &gt; return.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
</PPT>
<!-- =========================================================================== -->
<PPT>
<PPTNAME>..main():::EXIT</PPTNAME>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return == 0</INV> <SAMPLES>1</SAMPLES> <DAIKON>return == 0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.OneOfScalar</DAIKONCLASS> <METHOD>main()</METHOD> </INVINFO>
</PPT>
</INVARIANTS>
