<INVARIANTS>
<!-- =========================================================================== -->
<PPT>
<PPTNAME>..main():::EXIT</PPTNAME>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return == 0</INV> <SAMPLES>1</SAMPLES> <DAIKON>return == 0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.OneOfScalar</DAIKONCLASS> <METHOD>main()</METHOD> </INVINFO>
</PPT>
<!-- =========================================================================== -->
<PPT>
<PPTNAME>..obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String):::ENTER</PPTNAME>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.header.frame_id == param1.header.frame_id</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param0.header.frame_id == param1.header.frame_id</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoString.StringEqual</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0 != null</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param0 != null</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZero</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.y != 0</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param0.transform.rotation.y != 0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZeroFloat</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.child_frame_id == &quot;vicon/TELLO/TELLO&quot;</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param0.child_frame_id == &quot;vicon/TELLO/TELLO&quot;</DAIKON> <DAIKONCLASS>class daikon.inv.unary.string.OneOfString</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.header.frame_id == &quot;/world&quot;</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param0.header.frame_id == &quot;/world&quot;</DAIKON> <DAIKONCLASS>class daikon.inv.unary.string.OneOfString</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.z &lt;= 0.810078483849</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param0.transform.translation.z &lt;= 0.810078483849</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.UpperBoundFloat</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.x != 0</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param0.transform.translation.x != 0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZeroFloat</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.y != 0</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param0.transform.translation.y != 0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZeroFloat</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param1 != null</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param1 != null</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZero</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param1.child_frame_id == &quot;vicon/OBSTACLE/OBSTACLE&quot;</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param1.child_frame_id == &quot;vicon/OBSTACLE/OBSTACLE&quot;</DAIKON> <DAIKONCLASS>class daikon.inv.unary.string.OneOfString</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param1.transform.rotation.z one of { 0.337436885911, 0.337471089963 }</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param1.transform.rotation.z one of { 0.337436885911, 0.337471089963 }</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.OneOfFloat</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param1.transform.translation.z one of { 1.05275997823, 1.05287062785 }</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param1.transform.translation.z one of { 1.05275997823, 1.05287062785 }</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.OneOfFloat</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param1.transform.rotation.w == 0.941338508324</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param1.transform.rotation.w == 0.941338508324</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.OneOfFloat</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param2 != null</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param2 != null</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZero</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param2.data one of { &quot;nonsensical&quot;, &quot;y&quot; }</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param2.data one of { &quot;nonsensical&quot;, &quot;y&quot; }</DAIKON> <DAIKONCLASS>class daikon.inv.unary.string.OneOfString</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.header.seq &lt; param1.header.seq</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param0.header.seq &lt; param1.header.seq</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.IntLessThan</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.y != param0.transform.rotation.z</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param0.transform.rotation.y != param0.transform.rotation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.y &lt; param0.transform.rotation.x</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param0.transform.rotation.y &lt; param0.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.y &lt; param0.transform.rotation.w</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param0.transform.rotation.y &lt; param0.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.y != param1.transform.rotation.y</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param0.transform.rotation.y != param1.transform.rotation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.y &lt; param1.transform.rotation.z</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param0.transform.rotation.y &lt; param1.transform.rotation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.y != param1.transform.rotation.x</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param0.transform.rotation.y != param1.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.y &lt; param1.transform.rotation.w</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param0.transform.rotation.y &lt; param1.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.child_frame_id &gt; param0.header.frame_id</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param0.child_frame_id &gt; param0.header.frame_id</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoString.StringGreaterThan</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.child_frame_id &gt; param1.child_frame_id</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param0.child_frame_id &gt; param1.child_frame_id</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoString.StringGreaterThan</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.header.frame_id &lt; param1.child_frame_id</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param0.header.frame_id &lt; param1.child_frame_id</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoString.StringLessThan</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.z &lt; param0.transform.rotation.x</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param0.transform.rotation.z &lt; param0.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.z &lt; param0.transform.rotation.w</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param0.transform.rotation.z &lt; param0.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.z &lt; param1.transform.rotation.y</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param0.transform.rotation.z &lt; param1.transform.rotation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.z &lt; param1.transform.rotation.z</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param0.transform.rotation.z &lt; param1.transform.rotation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.z &lt; param1.transform.rotation.x</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param0.transform.rotation.z &lt; param1.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.z &lt; param1.transform.rotation.w</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param0.transform.rotation.z &lt; param1.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.z != param0.transform.translation.x</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param0.transform.translation.z != param0.transform.translation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.z != param0.transform.translation.y</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param0.transform.translation.z != param0.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.z &lt; param1.transform.translation.z</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param0.transform.translation.z &lt; param1.transform.translation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.z &gt; param1.transform.translation.x</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param0.transform.translation.z &gt; param1.transform.translation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.z != param1.transform.translation.y</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param0.transform.translation.z != param1.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.x &lt; param0.transform.translation.y</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param0.transform.translation.x &lt; param0.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.x &lt; param1.transform.translation.z</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param0.transform.translation.x &lt; param1.transform.translation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.x != param1.transform.translation.x</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param0.transform.translation.x != param1.transform.translation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.x != param1.transform.translation.y</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param0.transform.translation.x != param1.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.y != param1.transform.translation.z</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param0.transform.translation.y != param1.transform.translation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.y != param1.transform.translation.x</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param0.transform.translation.y != param1.transform.translation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.y != param1.transform.translation.y</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param0.transform.translation.y != param1.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.x &lt; param0.transform.rotation.w</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param0.transform.rotation.x &lt; param0.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.x &gt; param1.transform.rotation.y</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param0.transform.rotation.x &gt; param1.transform.rotation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.x &lt; param1.transform.rotation.z</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param0.transform.rotation.x &lt; param1.transform.rotation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.x &gt; param1.transform.rotation.x</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param0.transform.rotation.x &gt; param1.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.x &lt; param1.transform.rotation.w</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param0.transform.rotation.x &lt; param1.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.w &gt; param1.transform.rotation.y</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param0.transform.rotation.w &gt; param1.transform.rotation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.w &gt; param1.transform.rotation.z</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param0.transform.rotation.w &gt; param1.transform.rotation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.w &gt; param1.transform.rotation.x</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param0.transform.rotation.w &gt; param1.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.w &gt; param1.transform.rotation.w</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param0.transform.rotation.w &gt; param1.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param1.transform.rotation.y &lt; param1.transform.rotation.z</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param1.transform.rotation.y &lt; param1.transform.rotation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param1.transform.rotation.y &lt; param1.transform.rotation.x</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param1.transform.rotation.y &lt; param1.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>4.607535488E10 * param1.transform.rotation.y - 4.7818215541985E13 * param1.transform.rotation.w + 4.5013304913808E13 == 0</INV> <SAMPLES>1651</SAMPLES> <DAIKON>4.607535488E10 * param1.transform.rotation.y - 4.7818215541985E13 * param1.transform.rotation.w + 4.5013304913808E13 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.LinearBinaryFloat</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param1.transform.rotation.y &lt; param1.transform.rotation.w</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param1.transform.rotation.y &lt; param1.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param1.transform.rotation.z &gt; param1.transform.rotation.x</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param1.transform.rotation.z &gt; param1.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>1.07344720256E11 * param1.transform.rotation.z + 2.96857867915E11 * param1.transform.rotation.w - 3.15665821017E11 == 0</INV> <SAMPLES>1651</SAMPLES> <DAIKON>1.07344720256E11 * param1.transform.rotation.z + 2.96857867915E11 * param1.transform.rotation.w - 3.15665821017E11 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.LinearBinaryFloat</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param1.transform.rotation.z &lt; param1.transform.rotation.w</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param1.transform.rotation.z &lt; param1.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param1.transform.translation.z &gt; param1.transform.translation.x</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param1.transform.translation.z &gt; param1.transform.translation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param1.transform.translation.z &gt; param1.transform.translation.y</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param1.transform.translation.z &gt; param1.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param1.transform.translation.x &lt; param1.transform.translation.y</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param1.transform.translation.x &lt; param1.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>2.7480248385536E13 * param1.transform.rotation.x + 6.4394431520044E13 * param1.transform.rotation.w - 6.0667372089867E13 == 0</INV> <SAMPLES>1651</SAMPLES> <DAIKON>2.7480248385536E13 * param1.transform.rotation.x + 6.4394431520044E13 * param1.transform.rotation.w - 6.0667372089867E13 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.LinearBinaryFloat</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param1.transform.rotation.x &lt; param1.transform.rotation.w</INV> <SAMPLES>1651</SAMPLES> <DAIKON>param1.transform.rotation.x &lt; param1.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>2.1422206442810036E16 * param0.transform.rotation.y + 3.562412862593127E15 * param0.transform.rotation.z + 1.4731585492307327E19 * param1.transform.rotation.w - 1.386689712661266E19 == 0</INV> <SAMPLES>1651</SAMPLES> <DAIKON>2.1422206442810036E16 * param0.transform.rotation.y + 3.562412862593127E15 * param0.transform.rotation.z + 1.4731585492307327E19 * param1.transform.rotation.w - 1.386689712661266E19 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>5.575442158910622E15 * param0.transform.rotation.y + 3.562412862593127E15 * param0.transform.rotation.x + 1.0320629504510104E19 * param1.transform.rotation.w - 9.715201137326189E18 == 0</INV> <SAMPLES>1651</SAMPLES> <DAIKON>5.575442158910622E15 * param0.transform.rotation.y + 3.562412862593127E15 * param0.transform.rotation.x + 1.0320629504510104E19 * param1.transform.rotation.w - 9.715201137326189E18 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>2.183037726042365E15 * param0.transform.rotation.y - 3.907737596871298E15 * param1.transform.rotation.y + 4.0555528910276777E18 * param1.transform.rotation.w - 3.8176260315737825E18 == 0</INV> <SAMPLES>1651</SAMPLES> <DAIKON>2.183037726042365E15 * param0.transform.rotation.y - 3.907737596871298E15 * param1.transform.rotation.y + 4.0555528910276777E18 * param1.transform.rotation.w - 3.8176260315737825E18 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>2.787721079455311E15 * param0.transform.rotation.z - 1.0711103221405018E16 * param0.transform.rotation.x - 1.9503010796847645E19 * param1.transform.rotation.w + 1.8359320857748031E19 == 0</INV> <SAMPLES>1651</SAMPLES> <DAIKON>2.787721079455311E15 * param0.transform.rotation.z - 1.0711103221405018E16 * param0.transform.rotation.x - 1.9503010796847645E19 * param1.transform.rotation.w + 1.8359320857748031E19 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>1.826138712798049E15 * param0.transform.rotation.z - 8.5688825771240144E16 * param0.transform.rotation.w + 4.392332284991913E18 * param1.transform.rotation.w - 4.049020263831486E18 == 0</INV> <SAMPLES>1651</SAMPLES> <DAIKON>1.826138712798049E15 * param0.transform.rotation.z - 8.5688825771240144E16 * param0.transform.rotation.w + 4.392332284991913E18 * param1.transform.rotation.w - 4.049020263831486E18 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>4.36607545208473E15 * param0.transform.rotation.z + 4.471635221097603E15 * param1.transform.rotation.y - 4.640780681656617E18 * param1.transform.rotation.w + 4.3687434701679007E18 == 0</INV> <SAMPLES>1651</SAMPLES> <DAIKON>4.36607545208473E15 * param0.transform.rotation.z + 4.471635221097603E15 * param1.transform.rotation.y - 4.640780681656617E18 * param1.transform.rotation.w + 4.3687434701679007E18 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>7.37406473850123E14 * param0.transform.rotation.z + 8.3342851404312208E16 * param1.transform.rotation.x + 1.95297198997115456E17 * param1.transform.rotation.w - 1.8396315060259072E17 == 0</INV> <SAMPLES>1651</SAMPLES> <DAIKON>7.37406473850123E14 * param0.transform.rotation.z + 8.3342851404312208E16 * param1.transform.rotation.x + 1.95297198997115456E17 * param1.transform.rotation.w - 1.8396315060259072E17 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>1.826138712798049E15 * param0.transform.rotation.x - 2.2301768635642488E16 * param0.transform.rotation.w + 4.4682419113880888E18 * param1.transform.rotation.w - 4.1839019541967068E18 == 0</INV> <SAMPLES>1651</SAMPLES> <DAIKON>1.826138712798049E15 * param0.transform.rotation.x - 2.2301768635642488E16 * param0.transform.rotation.w + 4.4682419113880888E18 * param1.transform.rotation.w - 4.1839019541967068E18 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>2.183037726042365E15 * param0.transform.rotation.x - 8.78047050369893E15 * param1.transform.rotation.y + 9.1126033038579825E18 * param1.transform.rotation.w - 8.5781332819437445E18 == 0</INV> <SAMPLES>1651</SAMPLES> <DAIKON>2.183037726042365E15 * param0.transform.rotation.x - 8.78047050369893E15 * param1.transform.rotation.y + 9.1126033038579825E18 * param1.transform.rotation.w - 8.5781332819437445E18 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>7.37406473850123E14 * param0.transform.rotation.x - 3.2730283767203264E17 * param1.transform.rotation.x - 7.6696832834601357E17 * param1.transform.rotation.w + 7.2255866185350234E17 == 0</INV> <SAMPLES>1651</SAMPLES> <DAIKON>7.37406473850123E14 * param0.transform.rotation.x - 3.2730283767203264E17 * param1.transform.rotation.x - 7.6696832834601357E17 * param1.transform.rotation.w + 7.2255866185350234E17 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>3.492860361667784E16 * param0.transform.rotation.w + 4.979427897598067E15 * param1.transform.rotation.y - 5.1677812814084956E18 * param1.transform.rotation.w + 4.8297681944069868E18 == 0</INV> <SAMPLES>1651</SAMPLES> <DAIKON>3.492860361667784E16 * param0.transform.rotation.w + 4.979427897598067E15 * param1.transform.rotation.y - 5.1677812814084956E18 * param1.transform.rotation.w + 4.8297681944069868E18 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>3.182939573559415E15 * param1.transform.rotation.y + 1.0116752762728572E16 * param1.transform.rotation.x + 1.0612420299125478E16 * param1.transform.rotation.w - 9.996179067413018E15 == 0</INV> <SAMPLES>1651</SAMPLES> <DAIKON>3.182939573559415E15 * param1.transform.rotation.y + 1.0116752762728572E16 * param1.transform.rotation.x + 1.0612420299125478E16 * param1.transform.rotation.w - 9.996179067413018E15 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>2.867675058559987E15 * param1.transform.rotation.z - 1.7092114417882E13 * param1.transform.rotation.x + 7.89039776236301E15 * param1.transform.rotation.w - 8.395163520770147E15 == 0</INV> <SAMPLES>1651</SAMPLES> <DAIKON>2.867675058559987E15 * param1.transform.rotation.z - 1.7092114417882E13 * param1.transform.rotation.x + 7.89039776236301E15 * param1.transform.rotation.w - 8.395163520770147E15 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
</PPT>
<!-- =========================================================================== -->
<PPT>
<PPTNAME>..obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String):::EXIT</PPTNAME>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return != null</INV> <SAMPLES>1651</SAMPLES> <DAIKON>return != null</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZero</DAIKONCLASS> <METHOD>obstacle_detector(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
</PPT>
<!-- =========================================================================== -->
<PPT>
<PPTNAME>..state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String):::ENTER</PPTNAME>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.header.frame_id == param1.header.frame_id</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param0.header.frame_id == param1.header.frame_id</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoString.StringEqual</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0 != null</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param0 != null</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZero</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.y != 0</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param0.transform.rotation.y != 0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZeroFloat</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.child_frame_id == &quot;vicon/TELLO/TELLO&quot;</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param0.child_frame_id == &quot;vicon/TELLO/TELLO&quot;</DAIKON> <DAIKONCLASS>class daikon.inv.unary.string.OneOfString</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.header.frame_id == &quot;/world&quot;</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param0.header.frame_id == &quot;/world&quot;</DAIKON> <DAIKONCLASS>class daikon.inv.unary.string.OneOfString</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.x != 0</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param0.transform.translation.x != 0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZeroFloat</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.y != 0</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param0.transform.translation.y != 0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZeroFloat</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.x != 0</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param0.transform.rotation.x != 0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZeroFloat</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param1 != null</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param1 != null</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZero</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param1.child_frame_id == &quot;vicon/OBSTACLE/OBSTACLE&quot;</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param1.child_frame_id == &quot;vicon/OBSTACLE/OBSTACLE&quot;</DAIKON> <DAIKONCLASS>class daikon.inv.unary.string.OneOfString</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param1.transform.rotation.z one of { 0.337395156797, 0.337436885911, 0.337485042009 }</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param1.transform.rotation.z one of { 0.337395156797, 0.337436885911, 0.337485042009 }</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.OneOfFloat</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param1.transform.translation.z one of { 1.05273112304, 1.05287062785 }</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param1.transform.translation.z one of { 1.05273112304, 1.05287062785 }</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.OneOfFloat</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param1.transform.rotation.w == 0.941338508324</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param1.transform.rotation.w == 0.941338508324</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.OneOfFloat</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param2 != null</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param2 != null</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZero</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param2.data one of { &quot;no&quot;, &quot;nonsensical&quot;, &quot;y&quot; }</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param2.data one of { &quot;no&quot;, &quot;nonsensical&quot;, &quot;y&quot; }</DAIKON> <DAIKONCLASS>class daikon.inv.unary.string.OneOfString</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.header.seq &lt; param1.header.seq</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param0.header.seq &lt; param1.header.seq</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.IntLessThan</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.y != param0.transform.rotation.z</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param0.transform.rotation.y != param0.transform.rotation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.y != param0.transform.rotation.x</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param0.transform.rotation.y != param0.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.y &lt; param0.transform.rotation.w</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param0.transform.rotation.y &lt; param0.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.y != param1.transform.rotation.y</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param0.transform.rotation.y != param1.transform.rotation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.y &lt; param1.transform.rotation.z</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param0.transform.rotation.y &lt; param1.transform.rotation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.y != param1.transform.rotation.x</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param0.transform.rotation.y != param1.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.y &lt; param1.transform.rotation.w</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param0.transform.rotation.y &lt; param1.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.child_frame_id &gt; param0.header.frame_id</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param0.child_frame_id &gt; param0.header.frame_id</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoString.StringGreaterThan</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.child_frame_id &gt; param1.child_frame_id</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param0.child_frame_id &gt; param1.child_frame_id</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoString.StringGreaterThan</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.header.frame_id &lt; param1.child_frame_id</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param0.header.frame_id &lt; param1.child_frame_id</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoString.StringLessThan</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.z &lt; param0.transform.rotation.x</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param0.transform.rotation.z &lt; param0.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.z &lt; param0.transform.rotation.w</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param0.transform.rotation.z &lt; param0.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.z != param1.transform.rotation.y</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param0.transform.rotation.z != param1.transform.rotation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.z &lt; param1.transform.rotation.z</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param0.transform.rotation.z &lt; param1.transform.rotation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.z &lt; param1.transform.rotation.x</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param0.transform.rotation.z &lt; param1.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.z &lt; param1.transform.rotation.w</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param0.transform.rotation.z &lt; param1.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.z != param0.transform.translation.x</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param0.transform.translation.z != param0.transform.translation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.z != param0.transform.translation.y</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param0.transform.translation.z != param0.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.z &lt; param1.transform.translation.z</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param0.transform.translation.z &lt; param1.transform.translation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.z &gt; param1.transform.translation.x</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param0.transform.translation.z &gt; param1.transform.translation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.z != param1.transform.translation.y</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param0.transform.translation.z != param1.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.x != param0.transform.translation.y</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param0.transform.translation.x != param0.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.x &lt; param1.transform.translation.z</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param0.transform.translation.x &lt; param1.transform.translation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.x != param1.transform.translation.x</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param0.transform.translation.x != param1.transform.translation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.x != param1.transform.translation.y</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param0.transform.translation.x != param1.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.y != param1.transform.translation.z</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param0.transform.translation.y != param1.transform.translation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.y != param1.transform.translation.x</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param0.transform.translation.y != param1.transform.translation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.y != param1.transform.translation.y</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param0.transform.translation.y != param1.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.x &lt; param0.transform.rotation.w</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param0.transform.rotation.x &lt; param0.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.x &gt; param1.transform.rotation.y</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param0.transform.rotation.x &gt; param1.transform.rotation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.x &lt; param1.transform.rotation.z</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param0.transform.rotation.x &lt; param1.transform.rotation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.x != param1.transform.rotation.x</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param0.transform.rotation.x != param1.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.x &lt; param1.transform.rotation.w</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param0.transform.rotation.x &lt; param1.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.w &gt; param1.transform.rotation.y</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param0.transform.rotation.w &gt; param1.transform.rotation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.w &gt; param1.transform.rotation.z</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param0.transform.rotation.w &gt; param1.transform.rotation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.w &gt; param1.transform.rotation.x</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param0.transform.rotation.w &gt; param1.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.w &gt; param1.transform.rotation.w</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param0.transform.rotation.w &gt; param1.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param1.transform.rotation.y &lt; param1.transform.rotation.z</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param1.transform.rotation.y &lt; param1.transform.rotation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param1.transform.rotation.y &lt; param1.transform.rotation.x</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param1.transform.rotation.y &lt; param1.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param1.transform.rotation.y &lt; param1.transform.rotation.w</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param1.transform.rotation.y &lt; param1.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param1.transform.rotation.z &gt; param1.transform.rotation.x</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param1.transform.rotation.z &gt; param1.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>2.854705703E10 * param1.transform.rotation.z + 8.0276469703E10 * param1.transform.rotation.w - 8.5200161101E10 == 0</INV> <SAMPLES>1525</SAMPLES> <DAIKON>2.854705703E10 * param1.transform.rotation.z + 8.0276469703E10 * param1.transform.rotation.w - 8.5200161101E10 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.LinearBinaryFloat</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param1.transform.rotation.z &lt; param1.transform.rotation.w</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param1.transform.rotation.z &lt; param1.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param1.transform.translation.z &gt; param1.transform.translation.x</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param1.transform.translation.z &gt; param1.transform.translation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>3.164736369241E12 * param1.transform.translation.z - 4.699071703872E12 * param1.transform.translation.y - 3.099371438088E12 == 0</INV> <SAMPLES>1525</SAMPLES> <DAIKON>3.164736369241E12 * param1.transform.translation.z - 4.699071703872E12 * param1.transform.translation.y - 3.099371438088E12 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.LinearBinaryFloat</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param1.transform.translation.z &gt; param1.transform.translation.y</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param1.transform.translation.z &gt; param1.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param1.transform.translation.x &lt; param1.transform.translation.y</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param1.transform.translation.x &lt; param1.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>1.461609319936E13 * param1.transform.rotation.x - 3.1067310673047E13 * param1.transform.rotation.w + 2.92180259584E13 == 0</INV> <SAMPLES>1525</SAMPLES> <DAIKON>1.461609319936E13 * param1.transform.rotation.x - 3.1067310673047E13 * param1.transform.rotation.w + 2.92180259584E13 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.LinearBinaryFloat</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param1.transform.rotation.x &lt; param1.transform.rotation.w</INV> <SAMPLES>1525</SAMPLES> <DAIKON>param1.transform.rotation.x &lt; param1.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>4.303029420708531E15 * param0.transform.rotation.z + 7.725670786804264E16 * param0.transform.rotation.w + 1.4285964997119054E19 * param1.transform.rotation.w - 1.3524905576070386E19 == 0</INV> <SAMPLES>1525</SAMPLES> <DAIKON>4.303029420708531E15 * param0.transform.rotation.z + 7.725670786804264E16 * param0.transform.rotation.w + 1.4285964997119054E19 * param1.transform.rotation.w - 1.3524905576070386E19 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>5.810507007572125E15 * param0.transform.rotation.z - 5.8497356968943483E18 * param1.transform.rotation.x + 1.2433935236441127E19 * param1.transform.rotation.w - 1.1693563532872823E19 == 0</INV> <SAMPLES>1525</SAMPLES> <DAIKON>5.810507007572125E15 * param0.transform.rotation.z - 5.8497356968943483E18 * param1.transform.rotation.x + 1.2433935236441127E19 * param1.transform.rotation.w - 1.1693563532872823E19 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>2.67725888072135E14 * param0.transform.translation.z - 4.838058438861885E19 * param1.transform.translation.z + 7.183657928886955E19 * param1.transform.translation.y + 4.738131188084903E19 == 0</INV> <SAMPLES>1525</SAMPLES> <DAIKON>2.67725888072135E14 * param0.transform.translation.z - 4.838058438861885E19 * param1.transform.translation.z + 7.183657928886955E19 * param1.transform.translation.y + 4.738131188084903E19 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>4.303029420708531E15 * param0.transform.rotation.x + 1.872288905229128E17 * param0.transform.rotation.w + 2.3064539313235395E19 * param1.transform.rotation.w - 2.189862931573942E19 == 0</INV> <SAMPLES>1525</SAMPLES> <DAIKON>4.303029420708531E15 * param0.transform.rotation.x + 1.872288905229128E17 * param0.transform.rotation.w + 2.3064539313235395E19 * param1.transform.rotation.w - 2.189862931573942E19 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>5.810507007572125E15 * param0.transform.rotation.x - 1.7989265787196668E19 * param1.transform.rotation.x + 3.823717469284652E19 * param1.transform.rotation.w - 3.5961249797114122E19 == 0</INV> <SAMPLES>1525</SAMPLES> <DAIKON>5.810507007572125E15 * param0.transform.rotation.x - 1.7989265787196668E19 * param1.transform.rotation.x + 3.823717469284652E19 * param1.transform.rotation.w - 3.5961249797114122E19 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>5.810507007572125E15 * param0.transform.rotation.w + 6.0899054847496704E17 * param1.transform.rotation.x - 1.29444293412479974E18 * param1.transform.rotation.w + 1.21158825713715354E18 == 0</INV> <SAMPLES>1525</SAMPLES> <DAIKON>5.810507007572125E15 * param0.transform.rotation.w + 6.0899054847496704E17 * param1.transform.rotation.x - 1.29444293412479974E18 * param1.transform.rotation.w + 1.21158825713715354E18 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>7.5322496822983E13 * param1.transform.rotation.y - 2.937233350164471E15 * param1.transform.rotation.z - 8.18824530642422E15 * param1.transform.rotation.w + 8.69933133134651E15 == 0</INV> <SAMPLES>1525</SAMPLES> <DAIKON>7.5322496822983E13 * param1.transform.rotation.y - 2.937233350164471E15 * param1.transform.rotation.z - 8.18824530642422E15 * param1.transform.rotation.w + 8.69933133134651E15 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>1.6465839124672748E16 * param1.transform.rotation.y - 8.465127530796965E15 * param1.transform.rotation.x + 3.3617986722441404E16 * param1.transform.rotation.w - 3.1566981225349064E16 == 0</INV> <SAMPLES>1525</SAMPLES> <DAIKON>1.6465839124672748E16 * param1.transform.rotation.y - 8.465127530796965E15 * param1.transform.rotation.x + 3.3617986722441404E16 * param1.transform.rotation.w - 3.1566981225349064E16 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>4.116459781168187E15 * param1.transform.rotation.z - 1.804486050487E12 * param1.transform.rotation.x + 1.1579629794390504E16 * param1.transform.rotation.w - 1.228939332621777E16 == 0</INV> <SAMPLES>1525</SAMPLES> <DAIKON>4.116459781168187E15 * param1.transform.rotation.z - 1.804486050487E12 * param1.transform.rotation.x + 1.1579629794390504E16 * param1.transform.rotation.w - 1.228939332621777E16 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
</PPT>
<!-- =========================================================================== -->
<PPT>
<PPTNAME>..state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String):::EXIT</PPTNAME>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return != null</INV> <SAMPLES>1525</SAMPLES> <DAIKON>return != null</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZero</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.data one of { &quot;AVOIDING&quot;, &quot;GO TO GOAL&quot; }</INV> <SAMPLES>1525</SAMPLES> <DAIKON>return.data one of { &quot;AVOIDING&quot;, &quot;GO TO GOAL&quot; }</DAIKON> <DAIKONCLASS>class daikon.inv.unary.string.OneOfString</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.data &lt; orig(param2.data)</INV> <SAMPLES>1525</SAMPLES> <DAIKON>return.data &lt; orig(param2.data)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoString.StringLessThan</DAIKONCLASS> <METHOD>state(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
</PPT>
<!-- =========================================================================== -->
<PPT>
<PPTNAME>..user_input(std_msgs/Bool):::ENTER</PPTNAME>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0 has only one value</INV> <SAMPLES>8</SAMPLES> <DAIKON>param0 has only one value</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.OneOfScalar</DAIKONCLASS> <METHOD>user_input(std_msgs/Bool)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.data == true</INV> <SAMPLES>8</SAMPLES> <DAIKON>param0.data == true</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.OneOfScalar</DAIKONCLASS> <METHOD>user_input(std_msgs/Bool)</METHOD> </INVINFO>
</PPT>
<!-- =========================================================================== -->
<PPT>
<PPTNAME>..user_input(std_msgs/Bool):::EXIT</PPTNAME>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.data one of { &quot;no&quot;, &quot;y&quot; }</INV> <SAMPLES>8</SAMPLES> <DAIKON>return.data one of { &quot;no&quot;, &quot;y&quot; }</DAIKON> <DAIKONCLASS>class daikon.inv.unary.string.OneOfString</DAIKONCLASS> <METHOD>user_input(std_msgs/Bool)</METHOD> </INVINFO>
</PPT>
<!-- =========================================================================== -->
<PPT>
<PPTNAME>..velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String):::ENTER</PPTNAME>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.header.frame_id == param1.header.frame_id</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param0.header.frame_id == param1.header.frame_id</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoString.StringEqual</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0 != null</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param0 != null</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZero</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.y != 0</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param0.transform.rotation.y != 0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZeroFloat</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.child_frame_id == &quot;vicon/TELLO/TELLO&quot;</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param0.child_frame_id == &quot;vicon/TELLO/TELLO&quot;</DAIKON> <DAIKONCLASS>class daikon.inv.unary.string.OneOfString</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.header.frame_id == &quot;/world&quot;</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param0.header.frame_id == &quot;/world&quot;</DAIKON> <DAIKONCLASS>class daikon.inv.unary.string.OneOfString</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.x != 0</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param0.transform.translation.x != 0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZeroFloat</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param1 != null</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param1 != null</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZero</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param1.child_frame_id == &quot;vicon/OBSTACLE/OBSTACLE&quot;</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param1.child_frame_id == &quot;vicon/OBSTACLE/OBSTACLE&quot;</DAIKON> <DAIKONCLASS>class daikon.inv.unary.string.OneOfString</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param1.transform.rotation.z one of { 0.33738512419, 0.337436885911, 0.337479003812 }</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param1.transform.rotation.z one of { 0.33738512419, 0.337436885911, 0.337479003812 }</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.OneOfFloat</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param1.transform.translation.z one of { 1.05274685044, 1.05287062785 }</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param1.transform.translation.z one of { 1.05274685044, 1.05287062785 }</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.OneOfFloat</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param1.transform.rotation.w == 0.941338508324</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param1.transform.rotation.w == 0.941338508324</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.OneOfFloat</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param2 != null</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param2 != null</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZero</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param2.data one of { &quot;nonsensical&quot;, &quot;y&quot; }</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param2.data one of { &quot;nonsensical&quot;, &quot;y&quot; }</DAIKON> <DAIKONCLASS>class daikon.inv.unary.string.OneOfString</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.header.seq &lt; param1.header.seq</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param0.header.seq &lt; param1.header.seq</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.IntLessThan</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.y &gt; param0.transform.rotation.z</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param0.transform.rotation.y &gt; param0.transform.rotation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.y &lt; param0.transform.rotation.x</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param0.transform.rotation.y &lt; param0.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.y &lt; param0.transform.rotation.w</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param0.transform.rotation.y &lt; param0.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.y != param1.transform.rotation.y</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param0.transform.rotation.y != param1.transform.rotation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.y &lt; param1.transform.rotation.z</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param0.transform.rotation.y &lt; param1.transform.rotation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.y != param1.transform.rotation.x</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param0.transform.rotation.y != param1.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.y &lt; param1.transform.rotation.w</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param0.transform.rotation.y &lt; param1.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.child_frame_id &gt; param0.header.frame_id</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param0.child_frame_id &gt; param0.header.frame_id</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoString.StringGreaterThan</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.child_frame_id &gt; param1.child_frame_id</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param0.child_frame_id &gt; param1.child_frame_id</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoString.StringGreaterThan</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.header.frame_id &lt; param1.child_frame_id</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param0.header.frame_id &lt; param1.child_frame_id</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoString.StringLessThan</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.z &lt; param0.transform.rotation.x</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param0.transform.rotation.z &lt; param0.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.z &lt; param0.transform.rotation.w</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param0.transform.rotation.z &lt; param0.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.z &lt; param1.transform.rotation.y</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param0.transform.rotation.z &lt; param1.transform.rotation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.z &lt; param1.transform.rotation.z</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param0.transform.rotation.z &lt; param1.transform.rotation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.z &lt; param1.transform.rotation.x</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param0.transform.rotation.z &lt; param1.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.z &lt; param1.transform.rotation.w</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param0.transform.rotation.z &lt; param1.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.z != param0.transform.translation.x</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param0.transform.translation.z != param0.transform.translation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.z != param0.transform.translation.y</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param0.transform.translation.z != param0.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.z &lt; param1.transform.translation.z</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param0.transform.translation.z &lt; param1.transform.translation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.z &gt; param1.transform.translation.x</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param0.transform.translation.z &gt; param1.transform.translation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.z != param1.transform.translation.y</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param0.transform.translation.z != param1.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.x != param0.transform.translation.y</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param0.transform.translation.x != param0.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.x &lt; param1.transform.translation.z</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param0.transform.translation.x &lt; param1.transform.translation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.x != param1.transform.translation.x</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param0.transform.translation.x != param1.transform.translation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.x != param1.transform.translation.y</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param0.transform.translation.x != param1.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.y != param1.transform.translation.z</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param0.transform.translation.y != param1.transform.translation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.y &gt; param1.transform.translation.x</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param0.transform.translation.y &gt; param1.transform.translation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.y &gt; param1.transform.translation.y</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param0.transform.translation.y &gt; param1.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.x &lt; param0.transform.rotation.w</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param0.transform.rotation.x &lt; param0.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.x &gt; param1.transform.rotation.y</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param0.transform.rotation.x &gt; param1.transform.rotation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.x &lt; param1.transform.rotation.z</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param0.transform.rotation.x &lt; param1.transform.rotation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.x &gt; param1.transform.rotation.x</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param0.transform.rotation.x &gt; param1.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.x &lt; param1.transform.rotation.w</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param0.transform.rotation.x &lt; param1.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.w &gt; param1.transform.rotation.y</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param0.transform.rotation.w &gt; param1.transform.rotation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.w &gt; param1.transform.rotation.z</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param0.transform.rotation.w &gt; param1.transform.rotation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.w &gt; param1.transform.rotation.x</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param0.transform.rotation.w &gt; param1.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.w &gt; param1.transform.rotation.w</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param0.transform.rotation.w &gt; param1.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param1.transform.rotation.y &lt; param1.transform.rotation.z</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param1.transform.rotation.y &lt; param1.transform.rotation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param1.transform.rotation.y &lt; param1.transform.rotation.x</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param1.transform.rotation.y &lt; param1.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>5.813030272E9 * param1.transform.rotation.y + 2.1203045239985E13 * param1.transform.rotation.w - 1.9959201286632E13 == 0</INV> <SAMPLES>1649</SAMPLES> <DAIKON>5.813030272E9 * param1.transform.rotation.y + 2.1203045239985E13 * param1.transform.rotation.w - 1.9959201286632E13 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.LinearBinaryFloat</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param1.transform.rotation.y &lt; param1.transform.rotation.w</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param1.transform.rotation.y &lt; param1.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param1.transform.rotation.z &gt; param1.transform.rotation.x</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param1.transform.rotation.z &gt; param1.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>4.2240323754E10 * param1.transform.rotation.z + 1.1661219154E11 * param1.transform.rotation.w - 1.24024997455E11 == 0</INV> <SAMPLES>1649</SAMPLES> <DAIKON>4.2240323754E10 * param1.transform.rotation.z + 1.1661219154E11 * param1.transform.rotation.w - 1.24024997455E11 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.LinearBinaryFloat</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param1.transform.rotation.z &lt; param1.transform.rotation.w</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param1.transform.rotation.z &lt; param1.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param1.transform.translation.z &gt; param1.transform.translation.x</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param1.transform.translation.z &gt; param1.transform.translation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param1.transform.translation.z &gt; param1.transform.translation.y</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param1.transform.translation.z &gt; param1.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param1.transform.translation.x &lt; param1.transform.translation.y</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param1.transform.translation.x &lt; param1.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>3.300309287936E12 * param1.transform.rotation.x + 6.7500767460396E13 * param1.transform.rotation.w - 6.3547126615941E13 == 0</INV> <SAMPLES>1649</SAMPLES> <DAIKON>3.300309287936E12 * param1.transform.rotation.x + 6.7500767460396E13 * param1.transform.rotation.w - 6.3547126615941E13 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.LinearBinaryFloat</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param1.transform.rotation.x &lt; param1.transform.rotation.w</INV> <SAMPLES>1649</SAMPLES> <DAIKON>param1.transform.rotation.x &lt; param1.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>6.129334082265401E15 * param0.transform.rotation.y - 9.340717446875E15 * param0.transform.rotation.x - 1.2816184772662166E19 * param1.transform.rotation.w + 1.2064708237858441E19 == 0</INV> <SAMPLES>1649</SAMPLES> <DAIKON>6.129334082265401E15 * param0.transform.rotation.y - 9.340717446875E15 * param0.transform.rotation.x - 1.2816184772662166E19 * param1.transform.rotation.w + 1.2064708237858441E19 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>3.26127564887769E14 * param0.transform.rotation.y + 5.978773538117593E15 * param0.transform.rotation.w - 2.9877659285837906E18 * param1.transform.rotation.w + 2.8065337873443333E18 == 0</INV> <SAMPLES>1649</SAMPLES> <DAIKON>3.26127564887769E14 * param0.transform.rotation.y + 5.978773538117593E15 * param0.transform.rotation.w - 2.9877659285837906E18 * param1.transform.rotation.w + 2.8065337873443333E18 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>6.697879577839809E15 * param0.transform.rotation.y + 5.5433363427396552E16 * param1.transform.rotation.y + 2.021933582931837E20 * param1.transform.rotation.w - 1.9033188286338597E20 == 0</INV> <SAMPLES>1649</SAMPLES> <DAIKON>6.697879577839809E15 * param0.transform.rotation.y + 5.5433363427396552E16 * param1.transform.rotation.y + 2.021933582931837E20 * param1.transform.rotation.w - 1.9033188286338597E20 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>1.385137029035299E15 * param0.transform.rotation.y + 1.9669952204423232E18 * param1.transform.rotation.x + 4.023068003236259E19 * param1.transform.rotation.w - 3.787427350440586E19 == 0</INV> <SAMPLES>1649</SAMPLES> <DAIKON>1.385137029035299E15 * param0.transform.rotation.y + 1.9669952204423232E18 * param1.transform.rotation.x + 4.023068003236259E19 * param1.transform.rotation.w - 3.787427350440586E19 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>5.1161323214567E14 * param0.transform.rotation.x + 6.129334082265401E15 * param0.transform.rotation.w + 6.3491493543566541E17 * param1.transform.rotation.w - 6.0380403362980301E17 == 0</INV> <SAMPLES>1649</SAMPLES> <DAIKON>5.1161323214567E14 * param0.transform.rotation.x + 6.129334082265401E15 * param0.transform.rotation.w + 6.3491493543566541E17 * param1.transform.rotation.w - 6.0380403362980301E17 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>6.697879577839809E15 * param0.transform.rotation.x + 3.985726374128236E16 * param1.transform.rotation.y + 1.4537948827121189E20 * param1.transform.rotation.w - 1.3685119384905189E20 == 0</INV> <SAMPLES>1649</SAMPLES> <DAIKON>6.697879577839809E15 * param0.transform.rotation.x + 3.985726374128236E16 * param1.transform.rotation.y + 1.4537948827121189E20 * param1.transform.rotation.w - 1.3685119384905189E20 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>1.385137029035299E15 * param0.transform.rotation.x + 1.4142935306765952E18 * param1.transform.rotation.x + 2.8926349140642898E19 * param1.transform.rotation.w - 2.723211602998544E19 == 0</INV> <SAMPLES>1649</SAMPLES> <DAIKON>1.385137029035299E15 * param0.transform.rotation.x + 1.4142935306765952E18 * param1.transform.rotation.x + 2.8926349140642898E19 * param1.transform.rotation.w - 2.723211602998544E19 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>6.697879577839809E15 * param0.transform.rotation.w - 3.06398223825861E15 * param1.transform.rotation.y - 1.1175884344733688E19 * param1.transform.rotation.w + 1.0513579287952763E19 == 0</INV> <SAMPLES>1649</SAMPLES> <DAIKON>6.697879577839809E15 * param0.transform.rotation.w - 3.06398223825861E15 * param1.transform.rotation.y - 1.1175884344733688E19 * param1.transform.rotation.w + 1.0513579287952763E19 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>1.385137029035299E15 * param0.transform.rotation.w - 1.08722221520411008E17 * param1.transform.rotation.x - 2.22368049547762304E18 * param1.transform.rotation.w + 2.0920522382398615E18 == 0</INV> <SAMPLES>1649</SAMPLES> <DAIKON>1.385137029035299E15 * param0.transform.rotation.w - 1.08722221520411008E17 * param1.transform.rotation.x - 2.22368049547762304E18 * param1.transform.rotation.w + 2.0920522382398615E18 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>8.243896580011707E15 * param1.transform.rotation.y - 8.808388293924256E17 * param1.transform.rotation.z - 2.4675913938189978E18 * param1.transform.rotation.w + 2.6200980978227395E18 == 0</INV> <SAMPLES>1649</SAMPLES> <DAIKON>8.243896580011707E15 * param1.transform.rotation.y - 8.808388293924256E17 * param1.transform.rotation.z - 2.4675913938189978E18 * param1.transform.rotation.w + 2.6200980978227395E18 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>1.2777633225173732E16 * param1.transform.rotation.y + 4.822157885550615E15 * param1.transform.rotation.x - 8.263994943866896E16 * param1.transform.rotation.w + 7.7832653083689104E16 == 0</INV> <SAMPLES>1649</SAMPLES> <DAIKON>1.2777633225173732E16 * param1.transform.rotation.y + 4.822157885550615E15 * param1.transform.rotation.x - 8.263994943866896E16 * param1.transform.rotation.w + 7.7832653083689104E16 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>5.3925115349904136E16 * param1.transform.rotation.z + 3.73111915808625E14 * param1.transform.rotation.x + 1.4962365027374176E17 * param1.transform.rotation.w - 1.59043511279044864E17 == 0</INV> <SAMPLES>1649</SAMPLES> <DAIKON>5.3925115349904136E16 * param1.transform.rotation.z + 3.73111915808625E14 * param1.transform.rotation.x + 1.4962365027374176E17 * param1.transform.rotation.w - 1.59043511279044864E17 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
</PPT>
<!-- =========================================================================== -->
<PPT>
<PPTNAME>..velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String):::EXIT</PPTNAME>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.angular.y == return.angular.x</INV> <SAMPLES>1649</SAMPLES> <DAIKON>return.angular.y == return.angular.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.angular.y == return.angular.z</INV> <SAMPLES>1649</SAMPLES> <DAIKON>return.angular.y == return.angular.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return != null</INV> <SAMPLES>1649</SAMPLES> <DAIKON>return != null</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZero</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.linear.z == 0.0</INV> <SAMPLES>1649</SAMPLES> <DAIKON>return.linear.z == 0.0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.OneOfFloat</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.angular.y == 0.0</INV> <SAMPLES>1649</SAMPLES> <DAIKON>return.angular.y == 0.0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.OneOfFloat</DAIKONCLASS> <METHOD>velocity(geometry_msgs/TransformStamped, geometry_msgs/TransformStamped, std_msgs/String)</METHOD> </INVINFO>
</PPT>
<!-- =========================================================================== -->
<PPT>
<PPTNAME>..viconOBSTACLEOBSTACLE():::EXIT</PPTNAME>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return != null</INV> <SAMPLES>8576</SAMPLES> <DAIKON>return != null</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZero</DAIKONCLASS> <METHOD>viconOBSTACLEOBSTACLE()</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.child_frame_id == &quot;vicon/OBSTACLE/OBSTACLE&quot;</INV> <SAMPLES>8576</SAMPLES> <DAIKON>return.child_frame_id == &quot;vicon/OBSTACLE/OBSTACLE&quot;</DAIKON> <DAIKONCLASS>class daikon.inv.unary.string.OneOfString</DAIKONCLASS> <METHOD>viconOBSTACLEOBSTACLE()</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.header.frame_id == &quot;/world&quot;</INV> <SAMPLES>8576</SAMPLES> <DAIKON>return.header.frame_id == &quot;/world&quot;</DAIKON> <DAIKONCLASS>class daikon.inv.unary.string.OneOfString</DAIKONCLASS> <METHOD>viconOBSTACLEOBSTACLE()</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.z one of { 0.337384989291, 0.337436885911, 0.337479120203 }</INV> <SAMPLES>8576</SAMPLES> <DAIKON>return.transform.rotation.z one of { 0.337384989291, 0.337436885911, 0.337479120203 }</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.OneOfFloat</DAIKONCLASS> <METHOD>viconOBSTACLEOBSTACLE()</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.translation.z one of { 1.05273112304, 1.05287062785 }</INV> <SAMPLES>8576</SAMPLES> <DAIKON>return.transform.translation.z one of { 1.05273112304, 1.05287062785 }</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.OneOfFloat</DAIKONCLASS> <METHOD>viconOBSTACLEOBSTACLE()</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.w == 0.941338508324</INV> <SAMPLES>8576</SAMPLES> <DAIKON>return.transform.rotation.w == 0.941338508324</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.OneOfFloat</DAIKONCLASS> <METHOD>viconOBSTACLEOBSTACLE()</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.y &lt; return.transform.rotation.z</INV> <SAMPLES>8576</SAMPLES> <DAIKON>return.transform.rotation.y &lt; return.transform.rotation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>viconOBSTACLEOBSTACLE()</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.y &lt; return.transform.rotation.x</INV> <SAMPLES>8576</SAMPLES> <DAIKON>return.transform.rotation.y &lt; return.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>viconOBSTACLEOBSTACLE()</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>2.035130122496E12 * return.transform.rotation.y + 7.3898787337167E13 * return.transform.rotation.w - 6.9555946289881E13 == 0</INV> <SAMPLES>8576</SAMPLES> <DAIKON>2.035130122496E12 * return.transform.rotation.y + 7.3898787337167E13 * return.transform.rotation.w - 6.9555946289881E13 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.LinearBinaryFloat</DAIKONCLASS> <METHOD>viconOBSTACLEOBSTACLE()</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.y &lt; return.transform.rotation.w</INV> <SAMPLES>8576</SAMPLES> <DAIKON>return.transform.rotation.y &lt; return.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>viconOBSTACLEOBSTACLE()</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.child_frame_id &gt; return.header.frame_id</INV> <SAMPLES>8576</SAMPLES> <DAIKON>return.child_frame_id &gt; return.header.frame_id</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoString.StringGreaterThan</DAIKONCLASS> <METHOD>viconOBSTACLEOBSTACLE()</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.z &gt; return.transform.rotation.x</INV> <SAMPLES>8576</SAMPLES> <DAIKON>return.transform.rotation.z &gt; return.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>viconOBSTACLEOBSTACLE()</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>5.4537384524E10 * return.transform.rotation.z + 1.56170423558E11 * return.transform.rotation.w - 1.65412185545E11 == 0</INV> <SAMPLES>8576</SAMPLES> <DAIKON>5.4537384524E10 * return.transform.rotation.z + 1.56170423558E11 * return.transform.rotation.w - 1.65412185545E11 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.LinearBinaryFloat</DAIKONCLASS> <METHOD>viconOBSTACLEOBSTACLE()</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.z &lt; return.transform.rotation.w</INV> <SAMPLES>8576</SAMPLES> <DAIKON>return.transform.rotation.z &lt; return.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>viconOBSTACLEOBSTACLE()</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.translation.z &gt; return.transform.translation.x</INV> <SAMPLES>8576</SAMPLES> <DAIKON>return.transform.translation.z &gt; return.transform.translation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>viconOBSTACLEOBSTACLE()</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.translation.z &gt; return.transform.translation.y</INV> <SAMPLES>8576</SAMPLES> <DAIKON>return.transform.translation.z &gt; return.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>viconOBSTACLEOBSTACLE()</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.translation.x &lt; return.transform.translation.y</INV> <SAMPLES>8576</SAMPLES> <DAIKON>return.transform.translation.x &lt; return.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>viconOBSTACLEOBSTACLE()</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>9.891310193152E12 * return.transform.rotation.x + 2.04027821253012E14 * return.transform.rotation.w - 1.92077391862127E14 == 0</INV> <SAMPLES>8576</SAMPLES> <DAIKON>9.891310193152E12 * return.transform.rotation.x + 2.04027821253012E14 * return.transform.rotation.w - 1.92077391862127E14 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.LinearBinaryFloat</DAIKONCLASS> <METHOD>viconOBSTACLEOBSTACLE()</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.x &lt; return.transform.rotation.w</INV> <SAMPLES>8576</SAMPLES> <DAIKON>return.transform.rotation.x &lt; return.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>viconOBSTACLEOBSTACLE()</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>3.19125121273333E14 * return.transform.rotation.y - 1.8334908636381404E16 * return.transform.rotation.z - 5.1119367211672544E16 * return.transform.rotation.w + 5.4308730837939992E16 == 0</INV> <SAMPLES>8576</SAMPLES> <DAIKON>3.19125121273333E14 * return.transform.rotation.y - 1.8334908636381404E16 * return.transform.rotation.z - 5.1119367211672544E16 * return.transform.rotation.w + 5.4308730837939992E16 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>viconOBSTACLEOBSTACLE()</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>9.779072990220572E15 * return.transform.rotation.y + 4.155737401726541E15 * return.transform.rotation.x + 8.8136930018343824E16 * return.transform.rotation.w - 8.2936783076001728E16 == 0</INV> <SAMPLES>8576</SAMPLES> <DAIKON>9.779072990220572E15 * return.transform.rotation.y + 4.155737401726541E15 * return.transform.rotation.x + 8.8136930018343824E16 * return.transform.rotation.w - 8.2936783076001728E16 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>viconOBSTACLEOBSTACLE()</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>9.779072990220572E15 * return.transform.rotation.z + 9.9781305479091E13 * return.transform.rotation.x + 2.8281751881821416E16 * return.transform.rotation.w - 2.9922706115811484E16 == 0</INV> <SAMPLES>8576</SAMPLES> <DAIKON>9.779072990220572E15 * return.transform.rotation.z + 9.9781305479091E13 * return.transform.rotation.x + 2.8281751881821416E16 * return.transform.rotation.w - 2.9922706115811484E16 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>viconOBSTACLEOBSTACLE()</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>8.670662702506235E15 * return.transform.translation.z - 8.244419059448528E15 * return.transform.translation.x - 6.65490167779423E15 * return.transform.translation.y - 9.82908375934344E15 == 0</INV> <SAMPLES>8576</SAMPLES> <DAIKON>8.670662702506235E15 * return.transform.translation.z - 8.244419059448528E15 * return.transform.translation.x - 6.65490167779423E15 * return.transform.translation.y - 9.82908375934344E15 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>viconOBSTACLEOBSTACLE()</METHOD> </INVINFO>
</PPT>
<!-- =========================================================================== -->
<PPT>
<PPTNAME>..viconTELLOTELLO():::EXIT</PPTNAME>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return != null</INV> <SAMPLES>8557</SAMPLES> <DAIKON>return != null</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZero</DAIKONCLASS> <METHOD>viconTELLOTELLO()</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.y != 0</INV> <SAMPLES>8557</SAMPLES> <DAIKON>return.transform.rotation.y != 0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZeroFloat</DAIKONCLASS> <METHOD>viconTELLOTELLO()</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.child_frame_id == &quot;vicon/TELLO/TELLO&quot;</INV> <SAMPLES>8557</SAMPLES> <DAIKON>return.child_frame_id == &quot;vicon/TELLO/TELLO&quot;</DAIKON> <DAIKONCLASS>class daikon.inv.unary.string.OneOfString</DAIKONCLASS> <METHOD>viconTELLOTELLO()</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.header.frame_id == &quot;/world&quot;</INV> <SAMPLES>8557</SAMPLES> <DAIKON>return.header.frame_id == &quot;/world&quot;</DAIKON> <DAIKONCLASS>class daikon.inv.unary.string.OneOfString</DAIKONCLASS> <METHOD>viconTELLOTELLO()</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.translation.x != 0</INV> <SAMPLES>8557</SAMPLES> <DAIKON>return.transform.translation.x != 0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZeroFloat</DAIKONCLASS> <METHOD>viconTELLOTELLO()</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.translation.y != 0</INV> <SAMPLES>8557</SAMPLES> <DAIKON>return.transform.translation.y != 0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZeroFloat</DAIKONCLASS> <METHOD>viconTELLOTELLO()</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.x != 0</INV> <SAMPLES>8557</SAMPLES> <DAIKON>return.transform.rotation.x != 0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZeroFloat</DAIKONCLASS> <METHOD>viconTELLOTELLO()</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.y != return.transform.rotation.z</INV> <SAMPLES>8557</SAMPLES> <DAIKON>return.transform.rotation.y != return.transform.rotation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>viconTELLOTELLO()</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.y != return.transform.rotation.x</INV> <SAMPLES>8557</SAMPLES> <DAIKON>return.transform.rotation.y != return.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>viconTELLOTELLO()</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.y &lt; return.transform.rotation.w</INV> <SAMPLES>8557</SAMPLES> <DAIKON>return.transform.rotation.y &lt; return.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>viconTELLOTELLO()</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.child_frame_id &gt; return.header.frame_id</INV> <SAMPLES>8557</SAMPLES> <DAIKON>return.child_frame_id &gt; return.header.frame_id</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoString.StringGreaterThan</DAIKONCLASS> <METHOD>viconTELLOTELLO()</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.z &lt; return.transform.rotation.x</INV> <SAMPLES>8557</SAMPLES> <DAIKON>return.transform.rotation.z &lt; return.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>viconTELLOTELLO()</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.z &lt; return.transform.rotation.w</INV> <SAMPLES>8557</SAMPLES> <DAIKON>return.transform.rotation.z &lt; return.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>viconTELLOTELLO()</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.translation.z != return.transform.translation.x</INV> <SAMPLES>8557</SAMPLES> <DAIKON>return.transform.translation.z != return.transform.translation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>viconTELLOTELLO()</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.translation.z != return.transform.translation.y</INV> <SAMPLES>8557</SAMPLES> <DAIKON>return.transform.translation.z != return.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>viconTELLOTELLO()</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.translation.x != return.transform.translation.y</INV> <SAMPLES>8557</SAMPLES> <DAIKON>return.transform.translation.x != return.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>viconTELLOTELLO()</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.x &lt; return.transform.rotation.w</INV> <SAMPLES>8557</SAMPLES> <DAIKON>return.transform.rotation.x &lt; return.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>viconTELLOTELLO()</METHOD> </INVINFO>
</PPT>
</INVARIANTS>
