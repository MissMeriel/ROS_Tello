<INVARIANTS>
<!-- =========================================================================== -->
<PPT>
<PPTNAME>../obstacle_detector_next(std_msgs/Bool):::ENTER</PPTNAME>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0 != null</INV> <SAMPLES>108</SAMPLES> <DAIKON>param0 != null</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZero</DAIKONCLASS> <METHOD>/obstacle_detector_next(std_msgs/Bool)</METHOD> </INVINFO>
</PPT>
<!-- =========================================================================== -->
<PPT>
<PPTNAME>../obstacle_detector_next(std_msgs/Bool):::EXIT</PPTNAME>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.data == orig(param0.data)</INV> <SAMPLES>108</SAMPLES> <DAIKON>param0.data == orig(param0.data)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.IntEqual</DAIKONCLASS> <METHOD>/obstacle_detector_next(std_msgs/Bool)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return != null</INV> <SAMPLES>108</SAMPLES> <DAIKON>return != null</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZero</DAIKONCLASS> <METHOD>/obstacle_detector_next(std_msgs/Bool)</METHOD> </INVINFO>
</PPT>
<!-- =========================================================================== -->
<PPT>
<PPTNAME>../state_next(std_msgs/String):::ENTER</PPTNAME>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0 != null</INV> <SAMPLES>105</SAMPLES> <DAIKON>param0 != null</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZero</DAIKONCLASS> <METHOD>/state_next(std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.data one of { &quot;AVOIDING&quot;, &quot;GO TO GOAL&quot; }</INV> <SAMPLES>105</SAMPLES> <DAIKON>param0.data one of { &quot;AVOIDING&quot;, &quot;GO TO GOAL&quot; }</DAIKON> <DAIKONCLASS>class daikon.inv.unary.string.OneOfString</DAIKONCLASS> <METHOD>/state_next(std_msgs/String)</METHOD> </INVINFO>
</PPT>
<!-- =========================================================================== -->
<PPT>
<PPTNAME>../state_next(std_msgs/String):::EXIT</PPTNAME>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.data == orig(param0.data)</INV> <SAMPLES>105</SAMPLES> <DAIKON>param0.data == orig(param0.data)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoString.StringEqual</DAIKONCLASS> <METHOD>/state_next(std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.data one of { &quot;AVOIDING&quot;, &quot;GO TO GOAL&quot; }</INV> <SAMPLES>105</SAMPLES> <DAIKON>param0.data one of { &quot;AVOIDING&quot;, &quot;GO TO GOAL&quot; }</DAIKON> <DAIKONCLASS>class daikon.inv.unary.string.OneOfString</DAIKONCLASS> <METHOD>/state_next(std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return != null</INV> <SAMPLES>105</SAMPLES> <DAIKON>return != null</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZero</DAIKONCLASS> <METHOD>/state_next(std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.data one of { &quot;AVOIDING&quot;, &quot;GO TO GOAL&quot; }</INV> <SAMPLES>105</SAMPLES> <DAIKON>return.data one of { &quot;AVOIDING&quot;, &quot;GO TO GOAL&quot; }</DAIKON> <DAIKONCLASS>class daikon.inv.unary.string.OneOfString</DAIKONCLASS> <METHOD>/state_next(std_msgs/String)</METHOD> </INVINFO>
</PPT>
<!-- =========================================================================== -->
<PPT>
<PPTNAME>../user_input_next(std_msgs/String):::ENTER</PPTNAME>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0 != null</INV> <SAMPLES>24</SAMPLES> <DAIKON>param0 != null</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZero</DAIKONCLASS> <METHOD>/user_input_next(std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.data one of { &quot;no&quot;, &quot;y&quot; }</INV> <SAMPLES>24</SAMPLES> <DAIKON>param0.data one of { &quot;no&quot;, &quot;y&quot; }</DAIKON> <DAIKONCLASS>class daikon.inv.unary.string.OneOfString</DAIKONCLASS> <METHOD>/user_input_next(std_msgs/String)</METHOD> </INVINFO>
</PPT>
<!-- =========================================================================== -->
<PPT>
<PPTNAME>../user_input_next(std_msgs/String):::EXIT</PPTNAME>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.data == orig(param0.data)</INV> <SAMPLES>24</SAMPLES> <DAIKON>param0.data == orig(param0.data)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoString.StringEqual</DAIKONCLASS> <METHOD>/user_input_next(std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.data one of { &quot;no&quot;, &quot;y&quot; }</INV> <SAMPLES>24</SAMPLES> <DAIKON>param0.data one of { &quot;no&quot;, &quot;y&quot; }</DAIKON> <DAIKONCLASS>class daikon.inv.unary.string.OneOfString</DAIKONCLASS> <METHOD>/user_input_next(std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return != null</INV> <SAMPLES>24</SAMPLES> <DAIKON>return != null</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZero</DAIKONCLASS> <METHOD>/user_input_next(std_msgs/String)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.data one of { &quot;no&quot;, &quot;y&quot; }</INV> <SAMPLES>24</SAMPLES> <DAIKON>return.data one of { &quot;no&quot;, &quot;y&quot; }</DAIKON> <DAIKONCLASS>class daikon.inv.unary.string.OneOfString</DAIKONCLASS> <METHOD>/user_input_next(std_msgs/String)</METHOD> </INVINFO>
</PPT>
<!-- =========================================================================== -->
<PPT>
<PPTNAME>../velocity_next(geometry_msgs/Twist):::ENTER</PPTNAME>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.angular.y == param0.angular.x</INV> <SAMPLES>109</SAMPLES> <DAIKON>param0.angular.y == param0.angular.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/velocity_next(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.angular.y == param0.angular.z</INV> <SAMPLES>109</SAMPLES> <DAIKON>param0.angular.y == param0.angular.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/velocity_next(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0 != null</INV> <SAMPLES>109</SAMPLES> <DAIKON>param0 != null</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZero</DAIKONCLASS> <METHOD>/velocity_next(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.linear.z == 0.0</INV> <SAMPLES>109</SAMPLES> <DAIKON>param0.linear.z == 0.0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.OneOfFloat</DAIKONCLASS> <METHOD>/velocity_next(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.angular.y == 0.0</INV> <SAMPLES>109</SAMPLES> <DAIKON>param0.angular.y == 0.0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.OneOfFloat</DAIKONCLASS> <METHOD>/velocity_next(geometry_msgs/Twist)</METHOD> </INVINFO>
</PPT>
<!-- =========================================================================== -->
<PPT>
<PPTNAME>../velocity_next(geometry_msgs/Twist):::EXIT</PPTNAME>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.linear.y == orig(param0.linear.y)</INV> <SAMPLES>109</SAMPLES> <DAIKON>param0.linear.y == orig(param0.linear.y)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/velocity_next(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.linear.x == orig(param0.linear.x)</INV> <SAMPLES>109</SAMPLES> <DAIKON>param0.linear.x == orig(param0.linear.x)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/velocity_next(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.linear.z == orig(param0.linear.z)</INV> <SAMPLES>109</SAMPLES> <DAIKON>param0.linear.z == orig(param0.linear.z)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/velocity_next(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.angular.y == param0.angular.x</INV> <SAMPLES>109</SAMPLES> <DAIKON>param0.angular.y == param0.angular.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/velocity_next(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.angular.y == param0.angular.z</INV> <SAMPLES>109</SAMPLES> <DAIKON>param0.angular.y == param0.angular.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/velocity_next(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.angular.y == orig(param0.angular.y)</INV> <SAMPLES>109</SAMPLES> <DAIKON>param0.angular.y == orig(param0.angular.y)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/velocity_next(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.angular.y == orig(param0.angular.x)</INV> <SAMPLES>109</SAMPLES> <DAIKON>param0.angular.y == orig(param0.angular.x)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/velocity_next(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.angular.y == orig(param0.angular.z)</INV> <SAMPLES>109</SAMPLES> <DAIKON>param0.angular.y == orig(param0.angular.z)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/velocity_next(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.linear.z == return.angular.y</INV> <SAMPLES>109</SAMPLES> <DAIKON>return.linear.z == return.angular.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/velocity_next(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.linear.z == return.angular.x</INV> <SAMPLES>109</SAMPLES> <DAIKON>return.linear.z == return.angular.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/velocity_next(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.linear.z == return.angular.z</INV> <SAMPLES>109</SAMPLES> <DAIKON>return.linear.z == return.angular.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/velocity_next(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.linear.z == 0.0</INV> <SAMPLES>109</SAMPLES> <DAIKON>param0.linear.z == 0.0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.OneOfFloat</DAIKONCLASS> <METHOD>/velocity_next(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.angular.y == 0.0</INV> <SAMPLES>109</SAMPLES> <DAIKON>param0.angular.y == 0.0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.OneOfFloat</DAIKONCLASS> <METHOD>/velocity_next(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return != null</INV> <SAMPLES>109</SAMPLES> <DAIKON>return != null</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZero</DAIKONCLASS> <METHOD>/velocity_next(geometry_msgs/Twist)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.linear.z == 0.0</INV> <SAMPLES>109</SAMPLES> <DAIKON>return.linear.z == 0.0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.OneOfFloat</DAIKONCLASS> <METHOD>/velocity_next(geometry_msgs/Twist)</METHOD> </INVINFO>
</PPT>
<!-- =========================================================================== -->
<PPT>
<PPTNAME>../vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped):::ENTER</PPTNAME>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0 != null</INV> <SAMPLES>1792</SAMPLES> <DAIKON>param0 != null</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZero</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.child_frame_id == &quot;vicon/OBSTACLE/OBSTACLE&quot;</INV> <SAMPLES>1792</SAMPLES> <DAIKON>param0.child_frame_id == &quot;vicon/OBSTACLE/OBSTACLE&quot;</DAIKON> <DAIKONCLASS>class daikon.inv.unary.string.OneOfString</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.header.frame_id == &quot;/world&quot;</INV> <SAMPLES>1792</SAMPLES> <DAIKON>param0.header.frame_id == &quot;/world&quot;</DAIKON> <DAIKONCLASS>class daikon.inv.unary.string.OneOfString</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.w == 0.997787593551</INV> <SAMPLES>1792</SAMPLES> <DAIKON>param0.transform.rotation.w == 0.997787593551</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.OneOfFloat</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.y &lt; param0.transform.rotation.z</INV> <SAMPLES>1792</SAMPLES> <DAIKON>param0.transform.rotation.y &lt; param0.transform.rotation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.y &gt; param0.transform.rotation.x</INV> <SAMPLES>1792</SAMPLES> <DAIKON>param0.transform.rotation.y &gt; param0.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>9.54479502208E11 * param0.transform.rotation.y + 1.5839271296267E13 * param0.transform.rotation.w - 1.5809768934632E13 == 0</INV> <SAMPLES>1792</SAMPLES> <DAIKON>9.54479502208E11 * param0.transform.rotation.y + 1.5839271296267E13 * param0.transform.rotation.w - 1.5809768934632E13 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.LinearBinaryFloat</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.y &lt; param0.transform.rotation.w</INV> <SAMPLES>1792</SAMPLES> <DAIKON>param0.transform.rotation.y &lt; param0.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.child_frame_id &gt; param0.header.frame_id</INV> <SAMPLES>1792</SAMPLES> <DAIKON>param0.child_frame_id &gt; param0.header.frame_id</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoString.StringGreaterThan</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.z &gt; param0.transform.rotation.x</INV> <SAMPLES>1792</SAMPLES> <DAIKON>param0.transform.rotation.z &gt; param0.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>3.7763799768E10 * param0.transform.rotation.z + 5.20429113056E11 * param0.transform.rotation.w - 5.21771314415E11 == 0</INV> <SAMPLES>1792</SAMPLES> <DAIKON>3.7763799768E10 * param0.transform.rotation.z + 5.20429113056E11 * param0.transform.rotation.w - 5.21771314415E11 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.LinearBinaryFloat</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.z &lt; param0.transform.rotation.w</INV> <SAMPLES>1792</SAMPLES> <DAIKON>param0.transform.rotation.z &lt; param0.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.z &gt; param0.transform.translation.x</INV> <SAMPLES>1792</SAMPLES> <DAIKON>param0.transform.translation.z &gt; param0.transform.translation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.z &gt; param0.transform.translation.y</INV> <SAMPLES>1792</SAMPLES> <DAIKON>param0.transform.translation.z &gt; param0.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.x &lt; param0.transform.translation.y</INV> <SAMPLES>1792</SAMPLES> <DAIKON>param0.transform.translation.x &lt; param0.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.x &lt; param0.transform.rotation.w</INV> <SAMPLES>1792</SAMPLES> <DAIKON>param0.transform.rotation.x &lt; param0.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>4.618164649799257E15 * param0.transform.rotation.y + 1.6507065298994884E16 * param0.transform.rotation.z + 2.81694719291767168E17 * param0.transform.rotation.w - 2.82188294662144352E17 == 0</INV> <SAMPLES>1792</SAMPLES> <DAIKON>4.618164649799257E15 * param0.transform.rotation.y + 1.6507065298994884E16 * param0.transform.rotation.z + 2.81694719291767168E17 * param0.transform.rotation.w - 2.82188294662144352E17 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>1.031645457425496E16 * param0.transform.rotation.y + 4.126766324748721E15 * param0.transform.rotation.x + 1.05111993069306736E17 * param0.transform.rotation.w - 1.04918274990901456E17 == 0</INV> <SAMPLES>1792</SAMPLES> <DAIKON>1.031645457425496E16 * param0.transform.rotation.y + 4.126766324748721E15 * param0.transform.rotation.x + 1.05111993069306736E17 * param0.transform.rotation.w - 1.04918274990901456E17 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>4.126581829701984E16 * param0.transform.rotation.z - 4.618164649799257E15 * param0.transform.rotation.x + 5.86577017991392E17 * param0.transform.rotation.w - 5.8802768648049037E17 == 0</INV> <SAMPLES>1792</SAMPLES> <DAIKON>4.126581829701984E16 * param0.transform.rotation.z - 4.618164649799257E15 * param0.transform.rotation.x + 5.86577017991392E17 * param0.transform.rotation.w - 5.8802768648049037E17 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
</PPT>
<!-- =========================================================================== -->
<PPT>
<PPTNAME>../vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped):::EXIT</PPTNAME>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.header.seq == orig(param0.header.seq)</INV> <SAMPLES>1792</SAMPLES> <DAIKON>param0.header.seq == orig(param0.header.seq)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.IntEqual</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.y == orig(param0.transform.rotation.y)</INV> <SAMPLES>1792</SAMPLES> <DAIKON>param0.transform.rotation.y == orig(param0.transform.rotation.y)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.child_frame_id == orig(param0.child_frame_id)</INV> <SAMPLES>1792</SAMPLES> <DAIKON>param0.child_frame_id == orig(param0.child_frame_id)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoString.StringEqual</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.header.frame_id == orig(param0.header.frame_id)</INV> <SAMPLES>1792</SAMPLES> <DAIKON>param0.header.frame_id == orig(param0.header.frame_id)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoString.StringEqual</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.z == orig(param0.transform.rotation.z)</INV> <SAMPLES>1792</SAMPLES> <DAIKON>param0.transform.rotation.z == orig(param0.transform.rotation.z)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.header.stamp.secs == orig(param0.header.stamp.secs)</INV> <SAMPLES>1792</SAMPLES> <DAIKON>param0.header.stamp.secs == orig(param0.header.stamp.secs)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.IntEqual</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.translation.z == orig(param0.transform.translation.z)</INV> <SAMPLES>1792</SAMPLES> <DAIKON>param0.transform.translation.z == orig(param0.transform.translation.z)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.header.stamp.nsecs == orig(param0.header.stamp.nsecs)</INV> <SAMPLES>1792</SAMPLES> <DAIKON>param0.header.stamp.nsecs == orig(param0.header.stamp.nsecs)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.IntEqual</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.translation.x == orig(param0.transform.translation.x)</INV> <SAMPLES>1792</SAMPLES> <DAIKON>param0.transform.translation.x == orig(param0.transform.translation.x)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.translation.y == orig(param0.transform.translation.y)</INV> <SAMPLES>1792</SAMPLES> <DAIKON>param0.transform.translation.y == orig(param0.transform.translation.y)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.x == orig(param0.transform.rotation.x)</INV> <SAMPLES>1792</SAMPLES> <DAIKON>param0.transform.rotation.x == orig(param0.transform.rotation.x)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.w == orig(param0.transform.rotation.w)</INV> <SAMPLES>1792</SAMPLES> <DAIKON>param0.transform.rotation.w == orig(param0.transform.rotation.w)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.child_frame_id == &quot;vicon/OBSTACLE/OBSTACLE&quot;</INV> <SAMPLES>1792</SAMPLES> <DAIKON>param0.child_frame_id == &quot;vicon/OBSTACLE/OBSTACLE&quot;</DAIKON> <DAIKONCLASS>class daikon.inv.unary.string.OneOfString</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.header.frame_id == &quot;/world&quot;</INV> <SAMPLES>1792</SAMPLES> <DAIKON>param0.header.frame_id == &quot;/world&quot;</DAIKON> <DAIKONCLASS>class daikon.inv.unary.string.OneOfString</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.w == 0.997787593551</INV> <SAMPLES>1792</SAMPLES> <DAIKON>param0.transform.rotation.w == 0.997787593551</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.OneOfFloat</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return != null</INV> <SAMPLES>1792</SAMPLES> <DAIKON>return != null</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZero</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.child_frame_id == &quot;vicon/OBSTACLE/OBSTACLE&quot;</INV> <SAMPLES>1792</SAMPLES> <DAIKON>return.child_frame_id == &quot;vicon/OBSTACLE/OBSTACLE&quot;</DAIKON> <DAIKONCLASS>class daikon.inv.unary.string.OneOfString</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.header.frame_id == &quot;/world&quot;</INV> <SAMPLES>1792</SAMPLES> <DAIKON>return.header.frame_id == &quot;/world&quot;</DAIKON> <DAIKONCLASS>class daikon.inv.unary.string.OneOfString</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.w == 0.997788458582</INV> <SAMPLES>1792</SAMPLES> <DAIKON>return.transform.rotation.w == 0.997788458582</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.OneOfFloat</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.y &lt; param0.transform.rotation.z</INV> <SAMPLES>1792</SAMPLES> <DAIKON>param0.transform.rotation.y &lt; param0.transform.rotation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.y &gt; param0.transform.rotation.x</INV> <SAMPLES>1792</SAMPLES> <DAIKON>param0.transform.rotation.y &gt; param0.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>9.54479502208E11 * param0.transform.rotation.y + 1.5839271296267E13 * param0.transform.rotation.w - 1.5809768934632E13 == 0</INV> <SAMPLES>1792</SAMPLES> <DAIKON>9.54479502208E11 * param0.transform.rotation.y + 1.5839271296267E13 * param0.transform.rotation.w - 1.5809768934632E13 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.LinearBinaryFloat</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.y &lt; param0.transform.rotation.w</INV> <SAMPLES>1792</SAMPLES> <DAIKON>param0.transform.rotation.y &lt; param0.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.child_frame_id &gt; param0.header.frame_id</INV> <SAMPLES>1792</SAMPLES> <DAIKON>param0.child_frame_id &gt; param0.header.frame_id</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoString.StringGreaterThan</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.z &gt; param0.transform.rotation.x</INV> <SAMPLES>1792</SAMPLES> <DAIKON>param0.transform.rotation.z &gt; param0.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>3.7763799768E10 * param0.transform.rotation.z + 5.20429113056E11 * param0.transform.rotation.w - 5.21771314415E11 == 0</INV> <SAMPLES>1792</SAMPLES> <DAIKON>3.7763799768E10 * param0.transform.rotation.z + 5.20429113056E11 * param0.transform.rotation.w - 5.21771314415E11 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.LinearBinaryFloat</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.z &lt; param0.transform.rotation.w</INV> <SAMPLES>1792</SAMPLES> <DAIKON>param0.transform.rotation.z &lt; param0.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.translation.z &gt; param0.transform.translation.x</INV> <SAMPLES>1792</SAMPLES> <DAIKON>param0.transform.translation.z &gt; param0.transform.translation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.translation.z &gt; param0.transform.translation.y</INV> <SAMPLES>1792</SAMPLES> <DAIKON>param0.transform.translation.z &gt; param0.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.translation.x &lt; param0.transform.translation.y</INV> <SAMPLES>1792</SAMPLES> <DAIKON>param0.transform.translation.x &lt; param0.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.x &lt; param0.transform.rotation.w</INV> <SAMPLES>1792</SAMPLES> <DAIKON>param0.transform.rotation.x &lt; param0.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.header.seq &lt; return.header.stamp.secs</INV> <SAMPLES>1792</SAMPLES> <DAIKON>return.header.seq &lt; return.header.stamp.secs</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.IntLessThan</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.header.seq &lt; return.header.stamp.nsecs</INV> <SAMPLES>1792</SAMPLES> <DAIKON>return.header.seq &lt; return.header.stamp.nsecs</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.IntLessThan</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.y &lt; return.transform.rotation.z</INV> <SAMPLES>1792</SAMPLES> <DAIKON>return.transform.rotation.y &lt; return.transform.rotation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.y &lt; return.transform.translation.z</INV> <SAMPLES>1792</SAMPLES> <DAIKON>return.transform.rotation.y &lt; return.transform.translation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.y &gt; return.transform.translation.x</INV> <SAMPLES>1792</SAMPLES> <DAIKON>return.transform.rotation.y &gt; return.transform.translation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.y &gt; return.transform.translation.y</INV> <SAMPLES>1792</SAMPLES> <DAIKON>return.transform.rotation.y &gt; return.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.y &gt; return.transform.rotation.x</INV> <SAMPLES>1792</SAMPLES> <DAIKON>return.transform.rotation.y &gt; return.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>2.015516621696E12 * return.transform.rotation.y + 3.8325285119326E13 * return.transform.rotation.w - 3.8252192750273E13 == 0</INV> <SAMPLES>1792</SAMPLES> <DAIKON>2.015516621696E12 * return.transform.rotation.y + 3.8325285119326E13 * return.transform.rotation.w - 3.8252192750273E13 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.LinearBinaryFloat</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.y &lt; return.transform.rotation.w</INV> <SAMPLES>1792</SAMPLES> <DAIKON>return.transform.rotation.y &lt; return.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.child_frame_id &gt; return.header.frame_id</INV> <SAMPLES>1792</SAMPLES> <DAIKON>return.child_frame_id &gt; return.header.frame_id</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoString.StringGreaterThan</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.z &lt; return.transform.translation.z</INV> <SAMPLES>1792</SAMPLES> <DAIKON>return.transform.rotation.z &lt; return.transform.translation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.z &gt; return.transform.translation.x</INV> <SAMPLES>1792</SAMPLES> <DAIKON>return.transform.rotation.z &gt; return.transform.translation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.z &gt; return.transform.translation.y</INV> <SAMPLES>1792</SAMPLES> <DAIKON>return.transform.rotation.z &gt; return.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.z &gt; return.transform.rotation.x</INV> <SAMPLES>1792</SAMPLES> <DAIKON>return.transform.rotation.z &gt; return.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>1.25969788856E11 * return.transform.rotation.z + 1.47954794268E12 * return.transform.rotation.w - 1.484592608153E12 == 0</INV> <SAMPLES>1792</SAMPLES> <DAIKON>1.25969788856E11 * return.transform.rotation.z + 1.47954794268E12 * return.transform.rotation.w - 1.484592608153E12 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.LinearBinaryFloat</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.z &lt; return.transform.rotation.w</INV> <SAMPLES>1792</SAMPLES> <DAIKON>return.transform.rotation.z &lt; return.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.header.stamp.secs &gt; return.header.stamp.nsecs</INV> <SAMPLES>1792</SAMPLES> <DAIKON>return.header.stamp.secs &gt; return.header.stamp.nsecs</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.IntGreaterThan</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.translation.z &gt; return.transform.translation.x</INV> <SAMPLES>1792</SAMPLES> <DAIKON>return.transform.translation.z &gt; return.transform.translation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.translation.z &gt; return.transform.translation.y</INV> <SAMPLES>1792</SAMPLES> <DAIKON>return.transform.translation.z &gt; return.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.translation.z &gt; return.transform.rotation.x</INV> <SAMPLES>1792</SAMPLES> <DAIKON>return.transform.translation.z &gt; return.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>1.5746223607E10 * return.transform.translation.z - 4.58378135485E11 * return.transform.rotation.w + 4.530057154E11 == 0</INV> <SAMPLES>1792</SAMPLES> <DAIKON>1.5746223607E10 * return.transform.translation.z - 4.58378135485E11 * return.transform.rotation.w + 4.530057154E11 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.LinearBinaryFloat</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.translation.z &lt; return.transform.rotation.w</INV> <SAMPLES>1792</SAMPLES> <DAIKON>return.transform.translation.z &lt; return.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.translation.x &lt; return.transform.translation.y</INV> <SAMPLES>1792</SAMPLES> <DAIKON>return.transform.translation.x &lt; return.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.translation.x &lt; return.transform.rotation.x</INV> <SAMPLES>1792</SAMPLES> <DAIKON>return.transform.translation.x &lt; return.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>1.5872630648E10 * return.transform.translation.x - 3.427609029533E12 * return.transform.rotation.w + 3.421248713602E12 == 0</INV> <SAMPLES>1792</SAMPLES> <DAIKON>1.5872630648E10 * return.transform.translation.x - 3.427609029533E12 * return.transform.rotation.w + 3.421248713602E12 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.LinearBinaryFloat</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.translation.x &lt; return.transform.rotation.w</INV> <SAMPLES>1792</SAMPLES> <DAIKON>return.transform.translation.x &lt; return.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.translation.y &lt; return.transform.rotation.x</INV> <SAMPLES>1792</SAMPLES> <DAIKON>return.transform.translation.y &lt; return.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>1.51055199072E11 * return.transform.translation.y + 2.105271301493E12 * return.transform.rotation.w - 2.098150308558E12 == 0</INV> <SAMPLES>1792</SAMPLES> <DAIKON>1.51055199072E11 * return.transform.translation.y + 2.105271301493E12 * return.transform.rotation.w - 2.098150308558E12 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.LinearBinaryFloat</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.translation.y &lt; return.transform.rotation.w</INV> <SAMPLES>1792</SAMPLES> <DAIKON>return.transform.translation.y &lt; return.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>2.015516621696E12 * return.transform.rotation.x - 4.4472131292602E13 * return.transform.rotation.w + 4.4384020634159E13 == 0</INV> <SAMPLES>1792</SAMPLES> <DAIKON>2.015516621696E12 * return.transform.rotation.x - 4.4472131292602E13 * return.transform.rotation.w + 4.4384020634159E13 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.LinearBinaryFloat</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.x &lt; return.transform.rotation.w</INV> <SAMPLES>1792</SAMPLES> <DAIKON>return.transform.rotation.x &lt; return.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>4.618164649799257E15 * param0.transform.rotation.y + 1.6507065298994884E16 * param0.transform.rotation.z + 2.81694719291767168E17 * param0.transform.rotation.w - 2.82188294662144352E17 == 0</INV> <SAMPLES>1792</SAMPLES> <DAIKON>4.618164649799257E15 * param0.transform.rotation.y + 1.6507065298994884E16 * param0.transform.rotation.z + 2.81694719291767168E17 * param0.transform.rotation.w - 2.82188294662144352E17 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>1.031645457425496E16 * param0.transform.rotation.y + 4.126766324748721E15 * param0.transform.rotation.x + 1.05111993069306736E17 * param0.transform.rotation.w - 1.04918274990901456E17 == 0</INV> <SAMPLES>1792</SAMPLES> <DAIKON>1.031645457425496E16 * param0.transform.rotation.y + 4.126766324748721E15 * param0.transform.rotation.x + 1.05111993069306736E17 * param0.transform.rotation.w - 1.04918274990901456E17 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>4.126581829701984E16 * param0.transform.rotation.z - 4.618164649799257E15 * param0.transform.rotation.x + 5.86577017991392E17 * param0.transform.rotation.w - 5.8802768648049037E17 == 0</INV> <SAMPLES>1792</SAMPLES> <DAIKON>4.126581829701984E16 * param0.transform.rotation.z - 4.618164649799257E15 * param0.transform.rotation.x + 5.86577017991392E17 * param0.transform.rotation.w - 5.8802768648049037E17 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>4.618164649799257E15 * return.transform.rotation.y + 1.6507065298994884E16 * return.transform.rotation.z + 2.81694719291767168E17 * return.transform.rotation.w - 2.82188294662144352E17 == 0</INV> <SAMPLES>1792</SAMPLES> <DAIKON>4.618164649799257E15 * return.transform.rotation.y + 1.6507065298994884E16 * return.transform.rotation.z + 2.81694719291767168E17 * return.transform.rotation.w - 2.82188294662144352E17 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>2.94325614735592E16 * return.transform.rotation.y + 5.849901879333039E15 * return.transform.translation.z + 3.8937089922377178E17 * return.transform.rotation.w - 3.9029944777532109E17 == 0</INV> <SAMPLES>1792</SAMPLES> <DAIKON>2.94325614735592E16 * return.transform.rotation.y + 5.849901879333039E15 * return.transform.translation.z + 3.8937089922377178E17 * return.transform.rotation.w - 3.9029944777532109E17 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>1.9421111980453272E16 * return.transform.rotation.y - 1.90538429372673E14 * return.transform.translation.x + 3.1404459325929914E17 * return.transform.rotation.w - 3.1347718296370477E17 == 0</INV> <SAMPLES>1792</SAMPLES> <DAIKON>1.9421111980453272E16 * return.transform.rotation.y - 1.90538429372673E14 * return.transform.translation.x + 3.1404459325929914E17 * return.transform.rotation.w - 3.1347718296370477E17 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>3.192491792628934E15 * return.transform.rotation.y + 4.126766324748721E15 * return.transform.translation.y + 9.4988710851183984E16 * return.transform.rotation.w - 9.4729796044389072E16 == 0</INV> <SAMPLES>1792</SAMPLES> <DAIKON>3.192491792628934E15 * return.transform.rotation.y + 4.126766324748721E15 * return.transform.translation.y + 9.4988710851183984E16 * return.transform.rotation.w - 9.4729796044389072E16 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>1.031645457425496E16 * return.transform.rotation.y + 4.126766324748721E15 * return.transform.rotation.x + 1.05111993069306736E17 * return.transform.rotation.w - 1.04918274990901456E17 == 0</INV> <SAMPLES>1792</SAMPLES> <DAIKON>1.031645457425496E16 * return.transform.rotation.y + 4.126766324748721E15 * return.transform.rotation.x + 1.05111993069306736E17 * return.transform.rotation.w - 1.04918274990901456E17 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>5.88651229471184E16 * return.transform.rotation.z - 1.577600531522285E15 * return.transform.translation.z + 7.3731069264251661E17 * return.transform.rotation.w - 7.391297842923561E17 == 0</INV> <SAMPLES>1792</SAMPLES> <DAIKON>5.88651229471184E16 * return.transform.rotation.z - 1.577600531522285E15 * return.transform.translation.z + 7.3731069264251661E17 * return.transform.rotation.w - 7.391297842923561E17 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>1.9421111980453272E16 * return.transform.rotation.z - 1.03812810036077E14 * return.transform.translation.x + 2.48851891614007648E17 * return.transform.rotation.w - 2.49591719934537696E17 == 0</INV> <SAMPLES>1792</SAMPLES> <DAIKON>1.9421111980453272E16 * return.transform.rotation.z - 1.03812810036077E14 * return.transform.translation.x + 2.48851891614007648E17 * return.transform.rotation.w - 2.49591719934537696E17 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>3.553159215757162E15 * return.transform.rotation.z + 1.03812810036077E14 * return.transform.translation.y + 4.652637997847548E16 * return.transform.rotation.w - 4.6656373134463664E16 == 0</INV> <SAMPLES>1792</SAMPLES> <DAIKON>3.553159215757162E15 * return.transform.rotation.z + 1.03812810036077E14 * return.transform.translation.y + 4.652637997847548E16 * return.transform.rotation.w - 4.6656373134463664E16 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>4.126581829701984E16 * return.transform.rotation.z - 4.618164649799257E15 * return.transform.rotation.x + 5.86577017991392E17 * return.transform.rotation.w - 5.8802768648049037E17 == 0</INV> <SAMPLES>1792</SAMPLES> <DAIKON>4.126581829701984E16 * return.transform.rotation.z - 4.618164649799257E15 * return.transform.rotation.x + 5.86577017991392E17 * return.transform.rotation.w - 5.8802768648049037E17 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>1.9421111980453272E16 * return.transform.translation.z - 5.615361383747345E15 * return.transform.translation.x - 5.2996642917695309E17 * return.transform.rotation.w + 5.229868159073401E17 == 0</INV> <SAMPLES>1792</SAMPLES> <DAIKON>1.9421111980453272E16 * return.transform.translation.z - 5.615361383747345E15 * return.transform.translation.x - 5.2996642917695309E17 * return.transform.rotation.w + 5.229868159073401E17 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>3.192491792628934E15 * return.transform.translation.z - 5.009256357895325E15 * return.transform.translation.y - 1.34548953900122848E17 * return.transform.rotation.w + 1.33285965122410624E17 == 0</INV> <SAMPLES>1792</SAMPLES> <DAIKON>3.192491792628934E15 * return.transform.translation.z - 5.009256357895325E15 * return.transform.translation.y - 1.34548953900122848E17 * return.transform.rotation.w + 1.33285965122410624E17 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>1.041771325744985E15 * return.transform.translation.z + 9.368593829904E12 * return.transform.rotation.x - 3.0533048451779584E16 * return.transform.rotation.w + 3.01771991801093E16 == 0</INV> <SAMPLES>1792</SAMPLES> <DAIKON>1.041771325744985E15 * return.transform.translation.z + 9.368593829904E12 * return.transform.rotation.x - 3.0533048451779584E16 * return.transform.rotation.w + 3.01771991801093E16 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>3.286349002727035E15 * return.transform.translation.x + 1.4629017737226086E16 * return.transform.translation.y + 1.67029376271533472E17 * return.transform.rotation.w - 1.66168658712683488E17 == 0</INV> <SAMPLES>1792</SAMPLES> <DAIKON>3.286349002727035E15 * return.transform.translation.x + 1.4629017737226086E16 * return.transform.translation.y + 1.67029376271533472E17 * return.transform.rotation.w - 1.66168658712683488E17 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>5.773673256764877E15 * return.transform.translation.x + 2.355989306248034E16 * return.transform.rotation.x - 9.8319669927187174E17 * return.transform.rotation.w + 9.8158625076389222E17 == 0</INV> <SAMPLES>1792</SAMPLES> <DAIKON>5.773673256764877E15 * return.transform.translation.x + 2.355989306248034E16 * return.transform.rotation.x - 9.8319669927187174E17 * return.transform.rotation.w + 9.8158625076389222E17 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>5.15822728712748E15 * return.transform.translation.y - 1.596245896314467E15 * return.transform.rotation.x + 7.807293830986224E16 * return.transform.rotation.w - 7.782424001851496E16 == 0</INV> <SAMPLES>1792</SAMPLES> <DAIKON>5.15822728712748E15 * return.transform.translation.y - 1.596245896314467E15 * return.transform.rotation.x + 7.807293830986224E16 * return.transform.rotation.w - 7.782424001851496E16 == 0</DAIKON> <DAIKONCLASS>class daikon.inv.ternary.threeScalar.LinearTernaryFloat</DAIKONCLASS> <METHOD>/vicon/OBSTACLE/OBSTACLE_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
</PPT>
<!-- =========================================================================== -->
<PPT>
<PPTNAME>../vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped):::ENTER</PPTNAME>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0 != null</INV> <SAMPLES>1788</SAMPLES> <DAIKON>param0 != null</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZero</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.y != 0</INV> <SAMPLES>1788</SAMPLES> <DAIKON>param0.transform.rotation.y != 0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZeroFloat</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.child_frame_id == &quot;vicon/TELLO/TELLO&quot;</INV> <SAMPLES>1788</SAMPLES> <DAIKON>param0.child_frame_id == &quot;vicon/TELLO/TELLO&quot;</DAIKON> <DAIKONCLASS>class daikon.inv.unary.string.OneOfString</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.header.frame_id == &quot;/world&quot;</INV> <SAMPLES>1788</SAMPLES> <DAIKON>param0.header.frame_id == &quot;/world&quot;</DAIKON> <DAIKONCLASS>class daikon.inv.unary.string.OneOfString</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.z != 0</INV> <SAMPLES>1788</SAMPLES> <DAIKON>param0.transform.rotation.z != 0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZeroFloat</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.x != 0</INV> <SAMPLES>1788</SAMPLES> <DAIKON>param0.transform.translation.x != 0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZeroFloat</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.y != 0</INV> <SAMPLES>1788</SAMPLES> <DAIKON>param0.transform.translation.y != 0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZeroFloat</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.x != 0</INV> <SAMPLES>1788</SAMPLES> <DAIKON>param0.transform.rotation.x != 0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZeroFloat</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.w != 0</INV> <SAMPLES>1788</SAMPLES> <DAIKON>param0.transform.rotation.w != 0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZeroFloat</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.y != param0.transform.rotation.z</INV> <SAMPLES>1788</SAMPLES> <DAIKON>param0.transform.rotation.y != param0.transform.rotation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.y != param0.transform.rotation.x</INV> <SAMPLES>1788</SAMPLES> <DAIKON>param0.transform.rotation.y != param0.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.y != param0.transform.rotation.w</INV> <SAMPLES>1788</SAMPLES> <DAIKON>param0.transform.rotation.y != param0.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.child_frame_id &gt; param0.header.frame_id</INV> <SAMPLES>1788</SAMPLES> <DAIKON>param0.child_frame_id &gt; param0.header.frame_id</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoString.StringGreaterThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.z != param0.transform.rotation.x</INV> <SAMPLES>1788</SAMPLES> <DAIKON>param0.transform.rotation.z != param0.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.z != param0.transform.rotation.w</INV> <SAMPLES>1788</SAMPLES> <DAIKON>param0.transform.rotation.z != param0.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.z != param0.transform.translation.x</INV> <SAMPLES>1788</SAMPLES> <DAIKON>param0.transform.translation.z != param0.transform.translation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.z != param0.transform.translation.y</INV> <SAMPLES>1788</SAMPLES> <DAIKON>param0.transform.translation.z != param0.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.translation.x &gt; param0.transform.translation.y</INV> <SAMPLES>1788</SAMPLES> <DAIKON>param0.transform.translation.x &gt; param0.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>ENTER</PARENT> <INV>param0.transform.rotation.x != param0.transform.rotation.w</INV> <SAMPLES>1788</SAMPLES> <DAIKON>param0.transform.rotation.x != param0.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
</PPT>
<!-- =========================================================================== -->
<PPT>
<PPTNAME>../vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped):::EXIT</PPTNAME>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.header.seq == orig(param0.header.seq)</INV> <SAMPLES>1788</SAMPLES> <DAIKON>param0.header.seq == orig(param0.header.seq)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.IntEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.y == orig(param0.transform.rotation.y)</INV> <SAMPLES>1788</SAMPLES> <DAIKON>param0.transform.rotation.y == orig(param0.transform.rotation.y)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.child_frame_id == orig(param0.child_frame_id)</INV> <SAMPLES>1788</SAMPLES> <DAIKON>param0.child_frame_id == orig(param0.child_frame_id)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoString.StringEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.header.frame_id == orig(param0.header.frame_id)</INV> <SAMPLES>1788</SAMPLES> <DAIKON>param0.header.frame_id == orig(param0.header.frame_id)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoString.StringEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.z == orig(param0.transform.rotation.z)</INV> <SAMPLES>1788</SAMPLES> <DAIKON>param0.transform.rotation.z == orig(param0.transform.rotation.z)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.header.stamp.secs == orig(param0.header.stamp.secs)</INV> <SAMPLES>1788</SAMPLES> <DAIKON>param0.header.stamp.secs == orig(param0.header.stamp.secs)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.IntEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.translation.z == orig(param0.transform.translation.z)</INV> <SAMPLES>1788</SAMPLES> <DAIKON>param0.transform.translation.z == orig(param0.transform.translation.z)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.header.stamp.nsecs == orig(param0.header.stamp.nsecs)</INV> <SAMPLES>1788</SAMPLES> <DAIKON>param0.header.stamp.nsecs == orig(param0.header.stamp.nsecs)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.IntEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.translation.x == orig(param0.transform.translation.x)</INV> <SAMPLES>1788</SAMPLES> <DAIKON>param0.transform.translation.x == orig(param0.transform.translation.x)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.translation.y == orig(param0.transform.translation.y)</INV> <SAMPLES>1788</SAMPLES> <DAIKON>param0.transform.translation.y == orig(param0.transform.translation.y)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.x == orig(param0.transform.rotation.x)</INV> <SAMPLES>1788</SAMPLES> <DAIKON>param0.transform.rotation.x == orig(param0.transform.rotation.x)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.w == orig(param0.transform.rotation.w)</INV> <SAMPLES>1788</SAMPLES> <DAIKON>param0.transform.rotation.w == orig(param0.transform.rotation.w)</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.y != 0</INV> <SAMPLES>1788</SAMPLES> <DAIKON>param0.transform.rotation.y != 0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZeroFloat</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.child_frame_id == &quot;vicon/TELLO/TELLO&quot;</INV> <SAMPLES>1788</SAMPLES> <DAIKON>param0.child_frame_id == &quot;vicon/TELLO/TELLO&quot;</DAIKON> <DAIKONCLASS>class daikon.inv.unary.string.OneOfString</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.header.frame_id == &quot;/world&quot;</INV> <SAMPLES>1788</SAMPLES> <DAIKON>param0.header.frame_id == &quot;/world&quot;</DAIKON> <DAIKONCLASS>class daikon.inv.unary.string.OneOfString</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.z != 0</INV> <SAMPLES>1788</SAMPLES> <DAIKON>param0.transform.rotation.z != 0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZeroFloat</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.translation.x != 0</INV> <SAMPLES>1788</SAMPLES> <DAIKON>param0.transform.translation.x != 0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZeroFloat</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.translation.y != 0</INV> <SAMPLES>1788</SAMPLES> <DAIKON>param0.transform.translation.y != 0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZeroFloat</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.x != 0</INV> <SAMPLES>1788</SAMPLES> <DAIKON>param0.transform.rotation.x != 0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZeroFloat</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.w != 0</INV> <SAMPLES>1788</SAMPLES> <DAIKON>param0.transform.rotation.w != 0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZeroFloat</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return != null</INV> <SAMPLES>1788</SAMPLES> <DAIKON>return != null</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZero</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.y != 0</INV> <SAMPLES>1788</SAMPLES> <DAIKON>return.transform.rotation.y != 0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZeroFloat</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.child_frame_id == &quot;vicon/TELLO/TELLO&quot;</INV> <SAMPLES>1788</SAMPLES> <DAIKON>return.child_frame_id == &quot;vicon/TELLO/TELLO&quot;</DAIKON> <DAIKONCLASS>class daikon.inv.unary.string.OneOfString</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.header.frame_id == &quot;/world&quot;</INV> <SAMPLES>1788</SAMPLES> <DAIKON>return.header.frame_id == &quot;/world&quot;</DAIKON> <DAIKONCLASS>class daikon.inv.unary.string.OneOfString</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.z != 0</INV> <SAMPLES>1788</SAMPLES> <DAIKON>return.transform.rotation.z != 0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZeroFloat</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.translation.x != 0</INV> <SAMPLES>1788</SAMPLES> <DAIKON>return.transform.translation.x != 0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZeroFloat</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.translation.y != 0</INV> <SAMPLES>1788</SAMPLES> <DAIKON>return.transform.translation.y != 0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZeroFloat</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.x != 0</INV> <SAMPLES>1788</SAMPLES> <DAIKON>return.transform.rotation.x != 0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZeroFloat</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.w != 0</INV> <SAMPLES>1788</SAMPLES> <DAIKON>return.transform.rotation.w != 0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.NonZeroFloat</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.y != param0.transform.rotation.z</INV> <SAMPLES>1788</SAMPLES> <DAIKON>param0.transform.rotation.y != param0.transform.rotation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.y != param0.transform.rotation.x</INV> <SAMPLES>1788</SAMPLES> <DAIKON>param0.transform.rotation.y != param0.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.y != param0.transform.rotation.w</INV> <SAMPLES>1788</SAMPLES> <DAIKON>param0.transform.rotation.y != param0.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.child_frame_id &gt; param0.header.frame_id</INV> <SAMPLES>1788</SAMPLES> <DAIKON>param0.child_frame_id &gt; param0.header.frame_id</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoString.StringGreaterThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.z != param0.transform.rotation.x</INV> <SAMPLES>1788</SAMPLES> <DAIKON>param0.transform.rotation.z != param0.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.z != param0.transform.rotation.w</INV> <SAMPLES>1788</SAMPLES> <DAIKON>param0.transform.rotation.z != param0.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.translation.z != param0.transform.translation.x</INV> <SAMPLES>1788</SAMPLES> <DAIKON>param0.transform.translation.z != param0.transform.translation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.translation.z != param0.transform.translation.y</INV> <SAMPLES>1788</SAMPLES> <DAIKON>param0.transform.translation.z != param0.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.translation.x &gt; param0.transform.translation.y</INV> <SAMPLES>1788</SAMPLES> <DAIKON>param0.transform.translation.x &gt; param0.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>param0.transform.rotation.x != param0.transform.rotation.w</INV> <SAMPLES>1788</SAMPLES> <DAIKON>param0.transform.rotation.x != param0.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.header.seq &lt; return.header.stamp.secs</INV> <SAMPLES>1788</SAMPLES> <DAIKON>return.header.seq &lt; return.header.stamp.secs</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.IntLessThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.header.seq &lt; return.header.stamp.nsecs</INV> <SAMPLES>1788</SAMPLES> <DAIKON>return.header.seq &lt; return.header.stamp.nsecs</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.IntLessThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.y != return.transform.rotation.z</INV> <SAMPLES>1788</SAMPLES> <DAIKON>return.transform.rotation.y != return.transform.rotation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.y &lt; return.transform.translation.z</INV> <SAMPLES>1788</SAMPLES> <DAIKON>return.transform.rotation.y &lt; return.transform.translation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.y != return.transform.translation.x</INV> <SAMPLES>1788</SAMPLES> <DAIKON>return.transform.rotation.y != return.transform.translation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.y != return.transform.translation.y</INV> <SAMPLES>1788</SAMPLES> <DAIKON>return.transform.rotation.y != return.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.y != return.transform.rotation.x</INV> <SAMPLES>1788</SAMPLES> <DAIKON>return.transform.rotation.y != return.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.y != return.transform.rotation.w</INV> <SAMPLES>1788</SAMPLES> <DAIKON>return.transform.rotation.y != return.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.child_frame_id &gt; return.header.frame_id</INV> <SAMPLES>1788</SAMPLES> <DAIKON>return.child_frame_id &gt; return.header.frame_id</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoString.StringGreaterThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.z != return.transform.translation.z</INV> <SAMPLES>1788</SAMPLES> <DAIKON>return.transform.rotation.z != return.transform.translation.z</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.z != return.transform.translation.x</INV> <SAMPLES>1788</SAMPLES> <DAIKON>return.transform.rotation.z != return.transform.translation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.z != return.transform.translation.y</INV> <SAMPLES>1788</SAMPLES> <DAIKON>return.transform.rotation.z != return.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.z != return.transform.rotation.x</INV> <SAMPLES>1788</SAMPLES> <DAIKON>return.transform.rotation.z != return.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.z != return.transform.rotation.w</INV> <SAMPLES>1788</SAMPLES> <DAIKON>return.transform.rotation.z != return.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.header.stamp.secs &gt; return.header.stamp.nsecs</INV> <SAMPLES>1788</SAMPLES> <DAIKON>return.header.stamp.secs &gt; return.header.stamp.nsecs</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.IntGreaterThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.translation.z != return.transform.translation.x</INV> <SAMPLES>1788</SAMPLES> <DAIKON>return.transform.translation.z != return.transform.translation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.translation.z != return.transform.translation.y</INV> <SAMPLES>1788</SAMPLES> <DAIKON>return.transform.translation.z != return.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.translation.z != return.transform.rotation.x</INV> <SAMPLES>1788</SAMPLES> <DAIKON>return.transform.translation.z != return.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.translation.z != return.transform.rotation.w</INV> <SAMPLES>1788</SAMPLES> <DAIKON>return.transform.translation.z != return.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.translation.x &gt; return.transform.translation.y</INV> <SAMPLES>1788</SAMPLES> <DAIKON>return.transform.translation.x &gt; return.transform.translation.y</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatGreaterThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.translation.x != return.transform.rotation.x</INV> <SAMPLES>1788</SAMPLES> <DAIKON>return.transform.translation.x != return.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.translation.x &lt; return.transform.rotation.w</INV> <SAMPLES>1788</SAMPLES> <DAIKON>return.transform.translation.x &lt; return.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.translation.y != return.transform.rotation.x</INV> <SAMPLES>1788</SAMPLES> <DAIKON>return.transform.translation.y != return.transform.rotation.x</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.translation.y &lt; return.transform.rotation.w</INV> <SAMPLES>1788</SAMPLES> <DAIKON>return.transform.translation.y &lt; return.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatLessThan</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return.transform.rotation.x != return.transform.rotation.w</INV> <SAMPLES>1788</SAMPLES> <DAIKON>return.transform.rotation.x != return.transform.rotation.w</DAIKON> <DAIKONCLASS>class daikon.inv.binary.twoScalar.FloatNonEqual</DAIKONCLASS> <METHOD>/vicon/TELLO/TELLO_next(geometry_msgs/TransformStamped)</METHOD> </INVINFO>
</PPT>
<!-- =========================================================================== -->
<PPT>
<PPTNAME>..main():::EXIT</PPTNAME>
<INVINFO> <PARENT>EXIT</PARENT> <INV>return == 0</INV> <SAMPLES>1</SAMPLES> <DAIKON>return == 0</DAIKON> <DAIKONCLASS>class daikon.inv.unary.scalar.OneOfScalar</DAIKONCLASS> <METHOD>main()</METHOD> </INVINFO>
</PPT>
</INVARIANTS>
