// Generated by gencpp from file dronet_tello/FlightData.msg
// DO NOT EDIT!


#ifndef DRONET_TELLO_MESSAGE_FLIGHTDATA_H
#define DRONET_TELLO_MESSAGE_FLIGHTDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace dronet_tello
{
template <class ContainerAllocator>
struct FlightData_
{
  typedef FlightData_<ContainerAllocator> Type;

  FlightData_()
    : header()
    , battery_low(false)
    , battery_lower(false)
    , battery_percentage(0)
    , battery_state(false)
    , camera_state(0)
    , down_visual_state(false)
    , drone_battery_left(0)
    , drone_fly_time_left(0)
    , drone_hover(false)
    , em_open(false)
    , em_sky(false)
    , em_ground(false)
    , east_speed(0)
    , electrical_machinery_state(0)
    , factory_mode(false)
    , fly_mode(0)
    , fly_speed(0)
    , fly_time(0)
    , front_in(false)
    , front_lsc(false)
    , front_out(false)
    , gravity_state(false)
    , ground_speed(0)
    , height(0)
    , imu_calibration_state(0)
    , imu_state(false)
    , light_strength(0)
    , north_speed(0)
    , outage_recording(false)
    , power_state(false)
    , pressure_state(false)
    , smart_video_exit_mode(0)
    , temperature_height(false)
    , throw_fly_timer(0)
    , wifi_disturb(0)
    , wifi_strength(0)
    , wind_state(false)  {
    }
  FlightData_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , battery_low(false)
    , battery_lower(false)
    , battery_percentage(0)
    , battery_state(false)
    , camera_state(0)
    , down_visual_state(false)
    , drone_battery_left(0)
    , drone_fly_time_left(0)
    , drone_hover(false)
    , em_open(false)
    , em_sky(false)
    , em_ground(false)
    , east_speed(0)
    , electrical_machinery_state(0)
    , factory_mode(false)
    , fly_mode(0)
    , fly_speed(0)
    , fly_time(0)
    , front_in(false)
    , front_lsc(false)
    , front_out(false)
    , gravity_state(false)
    , ground_speed(0)
    , height(0)
    , imu_calibration_state(0)
    , imu_state(false)
    , light_strength(0)
    , north_speed(0)
    , outage_recording(false)
    , power_state(false)
    , pressure_state(false)
    , smart_video_exit_mode(0)
    , temperature_height(false)
    , throw_fly_timer(0)
    , wifi_disturb(0)
    , wifi_strength(0)
    , wind_state(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _battery_low_type;
  _battery_low_type battery_low;

   typedef uint8_t _battery_lower_type;
  _battery_lower_type battery_lower;

   typedef int8_t _battery_percentage_type;
  _battery_percentage_type battery_percentage;

   typedef uint8_t _battery_state_type;
  _battery_state_type battery_state;

   typedef int8_t _camera_state_type;
  _camera_state_type camera_state;

   typedef uint8_t _down_visual_state_type;
  _down_visual_state_type down_visual_state;

   typedef int16_t _drone_battery_left_type;
  _drone_battery_left_type drone_battery_left;

   typedef int16_t _drone_fly_time_left_type;
  _drone_fly_time_left_type drone_fly_time_left;

   typedef uint8_t _drone_hover_type;
  _drone_hover_type drone_hover;

   typedef uint8_t _em_open_type;
  _em_open_type em_open;

   typedef uint8_t _em_sky_type;
  _em_sky_type em_sky;

   typedef uint8_t _em_ground_type;
  _em_ground_type em_ground;

   typedef int16_t _east_speed_type;
  _east_speed_type east_speed;

   typedef int16_t _electrical_machinery_state_type;
  _electrical_machinery_state_type electrical_machinery_state;

   typedef uint8_t _factory_mode_type;
  _factory_mode_type factory_mode;

   typedef int8_t _fly_mode_type;
  _fly_mode_type fly_mode;

   typedef int16_t _fly_speed_type;
  _fly_speed_type fly_speed;

   typedef int16_t _fly_time_type;
  _fly_time_type fly_time;

   typedef uint8_t _front_in_type;
  _front_in_type front_in;

   typedef uint8_t _front_lsc_type;
  _front_lsc_type front_lsc;

   typedef uint8_t _front_out_type;
  _front_out_type front_out;

   typedef uint8_t _gravity_state_type;
  _gravity_state_type gravity_state;

   typedef int16_t _ground_speed_type;
  _ground_speed_type ground_speed;

   typedef int16_t _height_type;
  _height_type height;

   typedef int8_t _imu_calibration_state_type;
  _imu_calibration_state_type imu_calibration_state;

   typedef uint8_t _imu_state_type;
  _imu_state_type imu_state;

   typedef int8_t _light_strength_type;
  _light_strength_type light_strength;

   typedef int16_t _north_speed_type;
  _north_speed_type north_speed;

   typedef uint8_t _outage_recording_type;
  _outage_recording_type outage_recording;

   typedef uint8_t _power_state_type;
  _power_state_type power_state;

   typedef uint8_t _pressure_state_type;
  _pressure_state_type pressure_state;

   typedef int16_t _smart_video_exit_mode_type;
  _smart_video_exit_mode_type smart_video_exit_mode;

   typedef uint8_t _temperature_height_type;
  _temperature_height_type temperature_height;

   typedef int8_t _throw_fly_timer_type;
  _throw_fly_timer_type throw_fly_timer;

   typedef int8_t _wifi_disturb_type;
  _wifi_disturb_type wifi_disturb;

   typedef int8_t _wifi_strength_type;
  _wifi_strength_type wifi_strength;

   typedef uint8_t _wind_state_type;
  _wind_state_type wind_state;





  typedef boost::shared_ptr< ::dronet_tello::FlightData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dronet_tello::FlightData_<ContainerAllocator> const> ConstPtr;

}; // struct FlightData_

typedef ::dronet_tello::FlightData_<std::allocator<void> > FlightData;

typedef boost::shared_ptr< ::dronet_tello::FlightData > FlightDataPtr;
typedef boost::shared_ptr< ::dronet_tello::FlightData const> FlightDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dronet_tello::FlightData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dronet_tello::FlightData_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dronet_tello

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'dronet_tello': ['/mnt/c/Users/jggrn/Documents/Projects/ros_workspace/src/dronet_tello/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dronet_tello::FlightData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dronet_tello::FlightData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dronet_tello::FlightData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dronet_tello::FlightData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dronet_tello::FlightData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dronet_tello::FlightData_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dronet_tello::FlightData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8c659bf934436b7cb2d969ddd123268a";
  }

  static const char* value(const ::dronet_tello::FlightData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8c659bf934436b7cULL;
  static const uint64_t static_value2 = 0xb2d969ddd123268aULL;
};

template<class ContainerAllocator>
struct DataType< ::dronet_tello::FlightData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dronet_tello/FlightData";
  }

  static const char* value(const ::dronet_tello::FlightData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dronet_tello::FlightData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
bool battery_low\n\
bool battery_lower\n\
int8 battery_percentage\n\
bool battery_state\n\
int8 camera_state\n\
bool down_visual_state\n\
int16 drone_battery_left\n\
int16 drone_fly_time_left\n\
bool drone_hover\n\
bool em_open\n\
bool em_sky\n\
bool em_ground\n\
int16 east_speed\n\
int16 electrical_machinery_state\n\
bool factory_mode\n\
int8 fly_mode\n\
int16 fly_speed\n\
int16 fly_time\n\
bool front_in\n\
bool front_lsc\n\
bool front_out\n\
bool gravity_state\n\
int16 ground_speed\n\
int16 height\n\
int8 imu_calibration_state\n\
bool imu_state\n\
int8 light_strength\n\
int16 north_speed\n\
bool outage_recording\n\
bool power_state\n\
bool pressure_state\n\
int16 smart_video_exit_mode\n\
bool temperature_height\n\
int8 throw_fly_timer\n\
int8 wifi_disturb\n\
int8 wifi_strength\n\
bool wind_state\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::dronet_tello::FlightData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dronet_tello::FlightData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.battery_low);
      stream.next(m.battery_lower);
      stream.next(m.battery_percentage);
      stream.next(m.battery_state);
      stream.next(m.camera_state);
      stream.next(m.down_visual_state);
      stream.next(m.drone_battery_left);
      stream.next(m.drone_fly_time_left);
      stream.next(m.drone_hover);
      stream.next(m.em_open);
      stream.next(m.em_sky);
      stream.next(m.em_ground);
      stream.next(m.east_speed);
      stream.next(m.electrical_machinery_state);
      stream.next(m.factory_mode);
      stream.next(m.fly_mode);
      stream.next(m.fly_speed);
      stream.next(m.fly_time);
      stream.next(m.front_in);
      stream.next(m.front_lsc);
      stream.next(m.front_out);
      stream.next(m.gravity_state);
      stream.next(m.ground_speed);
      stream.next(m.height);
      stream.next(m.imu_calibration_state);
      stream.next(m.imu_state);
      stream.next(m.light_strength);
      stream.next(m.north_speed);
      stream.next(m.outage_recording);
      stream.next(m.power_state);
      stream.next(m.pressure_state);
      stream.next(m.smart_video_exit_mode);
      stream.next(m.temperature_height);
      stream.next(m.throw_fly_timer);
      stream.next(m.wifi_disturb);
      stream.next(m.wifi_strength);
      stream.next(m.wind_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FlightData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dronet_tello::FlightData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dronet_tello::FlightData_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "battery_low: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.battery_low);
    s << indent << "battery_lower: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.battery_lower);
    s << indent << "battery_percentage: ";
    Printer<int8_t>::stream(s, indent + "  ", v.battery_percentage);
    s << indent << "battery_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.battery_state);
    s << indent << "camera_state: ";
    Printer<int8_t>::stream(s, indent + "  ", v.camera_state);
    s << indent << "down_visual_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.down_visual_state);
    s << indent << "drone_battery_left: ";
    Printer<int16_t>::stream(s, indent + "  ", v.drone_battery_left);
    s << indent << "drone_fly_time_left: ";
    Printer<int16_t>::stream(s, indent + "  ", v.drone_fly_time_left);
    s << indent << "drone_hover: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.drone_hover);
    s << indent << "em_open: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.em_open);
    s << indent << "em_sky: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.em_sky);
    s << indent << "em_ground: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.em_ground);
    s << indent << "east_speed: ";
    Printer<int16_t>::stream(s, indent + "  ", v.east_speed);
    s << indent << "electrical_machinery_state: ";
    Printer<int16_t>::stream(s, indent + "  ", v.electrical_machinery_state);
    s << indent << "factory_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.factory_mode);
    s << indent << "fly_mode: ";
    Printer<int8_t>::stream(s, indent + "  ", v.fly_mode);
    s << indent << "fly_speed: ";
    Printer<int16_t>::stream(s, indent + "  ", v.fly_speed);
    s << indent << "fly_time: ";
    Printer<int16_t>::stream(s, indent + "  ", v.fly_time);
    s << indent << "front_in: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.front_in);
    s << indent << "front_lsc: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.front_lsc);
    s << indent << "front_out: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.front_out);
    s << indent << "gravity_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gravity_state);
    s << indent << "ground_speed: ";
    Printer<int16_t>::stream(s, indent + "  ", v.ground_speed);
    s << indent << "height: ";
    Printer<int16_t>::stream(s, indent + "  ", v.height);
    s << indent << "imu_calibration_state: ";
    Printer<int8_t>::stream(s, indent + "  ", v.imu_calibration_state);
    s << indent << "imu_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.imu_state);
    s << indent << "light_strength: ";
    Printer<int8_t>::stream(s, indent + "  ", v.light_strength);
    s << indent << "north_speed: ";
    Printer<int16_t>::stream(s, indent + "  ", v.north_speed);
    s << indent << "outage_recording: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.outage_recording);
    s << indent << "power_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.power_state);
    s << indent << "pressure_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pressure_state);
    s << indent << "smart_video_exit_mode: ";
    Printer<int16_t>::stream(s, indent + "  ", v.smart_video_exit_mode);
    s << indent << "temperature_height: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.temperature_height);
    s << indent << "throw_fly_timer: ";
    Printer<int8_t>::stream(s, indent + "  ", v.throw_fly_timer);
    s << indent << "wifi_disturb: ";
    Printer<int8_t>::stream(s, indent + "  ", v.wifi_disturb);
    s << indent << "wifi_strength: ";
    Printer<int8_t>::stream(s, indent + "  ", v.wifi_strength);
    s << indent << "wind_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wind_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONET_TELLO_MESSAGE_FLIGHTDATA_H
