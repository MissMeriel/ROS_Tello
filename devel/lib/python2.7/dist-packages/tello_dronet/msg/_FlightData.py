# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tello_dronet/FlightData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class FlightData(genpy.Message):
  _md5sum = "8c659bf934436b7cb2d969ddd123268a"
  _type = "tello_dronet/FlightData"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
bool battery_low
bool battery_lower
int8 battery_percentage
bool battery_state
int8 camera_state
bool down_visual_state
int16 drone_battery_left
int16 drone_fly_time_left
bool drone_hover
bool em_open
bool em_sky
bool em_ground
int16 east_speed
int16 electrical_machinery_state
bool factory_mode
int8 fly_mode
int16 fly_speed
int16 fly_time
bool front_in
bool front_lsc
bool front_out
bool gravity_state
int16 ground_speed
int16 height
int8 imu_calibration_state
bool imu_state
int8 light_strength
int16 north_speed
bool outage_recording
bool power_state
bool pressure_state
int16 smart_video_exit_mode
bool temperature_height
int8 throw_fly_timer
int8 wifi_disturb
int8 wifi_strength
bool wind_state

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','battery_low','battery_lower','battery_percentage','battery_state','camera_state','down_visual_state','drone_battery_left','drone_fly_time_left','drone_hover','em_open','em_sky','em_ground','east_speed','electrical_machinery_state','factory_mode','fly_mode','fly_speed','fly_time','front_in','front_lsc','front_out','gravity_state','ground_speed','height','imu_calibration_state','imu_state','light_strength','north_speed','outage_recording','power_state','pressure_state','smart_video_exit_mode','temperature_height','throw_fly_timer','wifi_disturb','wifi_strength','wind_state']
  _slot_types = ['std_msgs/Header','bool','bool','int8','bool','int8','bool','int16','int16','bool','bool','bool','bool','int16','int16','bool','int8','int16','int16','bool','bool','bool','bool','int16','int16','int8','bool','int8','int16','bool','bool','bool','int16','bool','int8','int8','int8','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,battery_low,battery_lower,battery_percentage,battery_state,camera_state,down_visual_state,drone_battery_left,drone_fly_time_left,drone_hover,em_open,em_sky,em_ground,east_speed,electrical_machinery_state,factory_mode,fly_mode,fly_speed,fly_time,front_in,front_lsc,front_out,gravity_state,ground_speed,height,imu_calibration_state,imu_state,light_strength,north_speed,outage_recording,power_state,pressure_state,smart_video_exit_mode,temperature_height,throw_fly_timer,wifi_disturb,wifi_strength,wind_state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FlightData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.battery_low is None:
        self.battery_low = False
      if self.battery_lower is None:
        self.battery_lower = False
      if self.battery_percentage is None:
        self.battery_percentage = 0
      if self.battery_state is None:
        self.battery_state = False
      if self.camera_state is None:
        self.camera_state = 0
      if self.down_visual_state is None:
        self.down_visual_state = False
      if self.drone_battery_left is None:
        self.drone_battery_left = 0
      if self.drone_fly_time_left is None:
        self.drone_fly_time_left = 0
      if self.drone_hover is None:
        self.drone_hover = False
      if self.em_open is None:
        self.em_open = False
      if self.em_sky is None:
        self.em_sky = False
      if self.em_ground is None:
        self.em_ground = False
      if self.east_speed is None:
        self.east_speed = 0
      if self.electrical_machinery_state is None:
        self.electrical_machinery_state = 0
      if self.factory_mode is None:
        self.factory_mode = False
      if self.fly_mode is None:
        self.fly_mode = 0
      if self.fly_speed is None:
        self.fly_speed = 0
      if self.fly_time is None:
        self.fly_time = 0
      if self.front_in is None:
        self.front_in = False
      if self.front_lsc is None:
        self.front_lsc = False
      if self.front_out is None:
        self.front_out = False
      if self.gravity_state is None:
        self.gravity_state = False
      if self.ground_speed is None:
        self.ground_speed = 0
      if self.height is None:
        self.height = 0
      if self.imu_calibration_state is None:
        self.imu_calibration_state = 0
      if self.imu_state is None:
        self.imu_state = False
      if self.light_strength is None:
        self.light_strength = 0
      if self.north_speed is None:
        self.north_speed = 0
      if self.outage_recording is None:
        self.outage_recording = False
      if self.power_state is None:
        self.power_state = False
      if self.pressure_state is None:
        self.pressure_state = False
      if self.smart_video_exit_mode is None:
        self.smart_video_exit_mode = 0
      if self.temperature_height is None:
        self.temperature_height = False
      if self.throw_fly_timer is None:
        self.throw_fly_timer = 0
      if self.wifi_disturb is None:
        self.wifi_disturb = 0
      if self.wifi_strength is None:
        self.wifi_strength = 0
      if self.wind_state is None:
        self.wind_state = False
    else:
      self.header = std_msgs.msg.Header()
      self.battery_low = False
      self.battery_lower = False
      self.battery_percentage = 0
      self.battery_state = False
      self.camera_state = 0
      self.down_visual_state = False
      self.drone_battery_left = 0
      self.drone_fly_time_left = 0
      self.drone_hover = False
      self.em_open = False
      self.em_sky = False
      self.em_ground = False
      self.east_speed = 0
      self.electrical_machinery_state = 0
      self.factory_mode = False
      self.fly_mode = 0
      self.fly_speed = 0
      self.fly_time = 0
      self.front_in = False
      self.front_lsc = False
      self.front_out = False
      self.gravity_state = False
      self.ground_speed = 0
      self.height = 0
      self.imu_calibration_state = 0
      self.imu_state = False
      self.light_strength = 0
      self.north_speed = 0
      self.outage_recording = False
      self.power_state = False
      self.pressure_state = False
      self.smart_video_exit_mode = 0
      self.temperature_height = False
      self.throw_fly_timer = 0
      self.wifi_disturb = 0
      self.wifi_strength = 0
      self.wind_state = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2BbBbB2h4B2hBb2h4B2hbBbh3BhB3bB().pack(_x.battery_low, _x.battery_lower, _x.battery_percentage, _x.battery_state, _x.camera_state, _x.down_visual_state, _x.drone_battery_left, _x.drone_fly_time_left, _x.drone_hover, _x.em_open, _x.em_sky, _x.em_ground, _x.east_speed, _x.electrical_machinery_state, _x.factory_mode, _x.fly_mode, _x.fly_speed, _x.fly_time, _x.front_in, _x.front_lsc, _x.front_out, _x.gravity_state, _x.ground_speed, _x.height, _x.imu_calibration_state, _x.imu_state, _x.light_strength, _x.north_speed, _x.outage_recording, _x.power_state, _x.pressure_state, _x.smart_video_exit_mode, _x.temperature_height, _x.throw_fly_timer, _x.wifi_disturb, _x.wifi_strength, _x.wind_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 47
      (_x.battery_low, _x.battery_lower, _x.battery_percentage, _x.battery_state, _x.camera_state, _x.down_visual_state, _x.drone_battery_left, _x.drone_fly_time_left, _x.drone_hover, _x.em_open, _x.em_sky, _x.em_ground, _x.east_speed, _x.electrical_machinery_state, _x.factory_mode, _x.fly_mode, _x.fly_speed, _x.fly_time, _x.front_in, _x.front_lsc, _x.front_out, _x.gravity_state, _x.ground_speed, _x.height, _x.imu_calibration_state, _x.imu_state, _x.light_strength, _x.north_speed, _x.outage_recording, _x.power_state, _x.pressure_state, _x.smart_video_exit_mode, _x.temperature_height, _x.throw_fly_timer, _x.wifi_disturb, _x.wifi_strength, _x.wind_state,) = _get_struct_2BbBbB2h4B2hBb2h4B2hbBbh3BhB3bB().unpack(str[start:end])
      self.battery_low = bool(self.battery_low)
      self.battery_lower = bool(self.battery_lower)
      self.battery_state = bool(self.battery_state)
      self.down_visual_state = bool(self.down_visual_state)
      self.drone_hover = bool(self.drone_hover)
      self.em_open = bool(self.em_open)
      self.em_sky = bool(self.em_sky)
      self.em_ground = bool(self.em_ground)
      self.factory_mode = bool(self.factory_mode)
      self.front_in = bool(self.front_in)
      self.front_lsc = bool(self.front_lsc)
      self.front_out = bool(self.front_out)
      self.gravity_state = bool(self.gravity_state)
      self.imu_state = bool(self.imu_state)
      self.outage_recording = bool(self.outage_recording)
      self.power_state = bool(self.power_state)
      self.pressure_state = bool(self.pressure_state)
      self.temperature_height = bool(self.temperature_height)
      self.wind_state = bool(self.wind_state)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2BbBbB2h4B2hBb2h4B2hbBbh3BhB3bB().pack(_x.battery_low, _x.battery_lower, _x.battery_percentage, _x.battery_state, _x.camera_state, _x.down_visual_state, _x.drone_battery_left, _x.drone_fly_time_left, _x.drone_hover, _x.em_open, _x.em_sky, _x.em_ground, _x.east_speed, _x.electrical_machinery_state, _x.factory_mode, _x.fly_mode, _x.fly_speed, _x.fly_time, _x.front_in, _x.front_lsc, _x.front_out, _x.gravity_state, _x.ground_speed, _x.height, _x.imu_calibration_state, _x.imu_state, _x.light_strength, _x.north_speed, _x.outage_recording, _x.power_state, _x.pressure_state, _x.smart_video_exit_mode, _x.temperature_height, _x.throw_fly_timer, _x.wifi_disturb, _x.wifi_strength, _x.wind_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 47
      (_x.battery_low, _x.battery_lower, _x.battery_percentage, _x.battery_state, _x.camera_state, _x.down_visual_state, _x.drone_battery_left, _x.drone_fly_time_left, _x.drone_hover, _x.em_open, _x.em_sky, _x.em_ground, _x.east_speed, _x.electrical_machinery_state, _x.factory_mode, _x.fly_mode, _x.fly_speed, _x.fly_time, _x.front_in, _x.front_lsc, _x.front_out, _x.gravity_state, _x.ground_speed, _x.height, _x.imu_calibration_state, _x.imu_state, _x.light_strength, _x.north_speed, _x.outage_recording, _x.power_state, _x.pressure_state, _x.smart_video_exit_mode, _x.temperature_height, _x.throw_fly_timer, _x.wifi_disturb, _x.wifi_strength, _x.wind_state,) = _get_struct_2BbBbB2h4B2hBb2h4B2hbBbh3BhB3bB().unpack(str[start:end])
      self.battery_low = bool(self.battery_low)
      self.battery_lower = bool(self.battery_lower)
      self.battery_state = bool(self.battery_state)
      self.down_visual_state = bool(self.down_visual_state)
      self.drone_hover = bool(self.drone_hover)
      self.em_open = bool(self.em_open)
      self.em_sky = bool(self.em_sky)
      self.em_ground = bool(self.em_ground)
      self.factory_mode = bool(self.factory_mode)
      self.front_in = bool(self.front_in)
      self.front_lsc = bool(self.front_lsc)
      self.front_out = bool(self.front_out)
      self.gravity_state = bool(self.gravity_state)
      self.imu_state = bool(self.imu_state)
      self.outage_recording = bool(self.outage_recording)
      self.power_state = bool(self.power_state)
      self.pressure_state = bool(self.pressure_state)
      self.temperature_height = bool(self.temperature_height)
      self.wind_state = bool(self.wind_state)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_2BbBbB2h4B2hBb2h4B2hbBbh3BhB3bB = None
def _get_struct_2BbBbB2h4B2hBb2h4B2hbBbh3BhB3bB():
    global _struct_2BbBbB2h4B2hBb2h4B2hbBbh3BhB3bB
    if _struct_2BbBbB2h4B2hBb2h4B2hbBbh3BhB3bB is None:
        _struct_2BbBbB2h4B2hBb2h4B2hbBbh3BhB3bB = struct.Struct("<2BbBbB2h4B2hBb2h4B2hbBbh3BhB3bB")
    return _struct_2BbBbB2h4B2hBb2h4B2hbBbh3BhB3bB
